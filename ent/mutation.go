// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/LucsOlv/Turtwing_Back/ent/codeembedding"
	"github.com/LucsOlv/Turtwing_Back/ent/history"
	"github.com/LucsOlv/Turtwing_Back/ent/historyproject"
	"github.com/LucsOlv/Turtwing_Back/ent/predicate"
	"github.com/LucsOlv/Turtwing_Back/ent/project"
	"github.com/LucsOlv/Turtwing_Back/ent/projectmember"
	"github.com/LucsOlv/Turtwing_Back/ent/user"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCodeEmbedding  = "CodeEmbedding"
	TypeHistory        = "History"
	TypeHistoryProject = "HistoryProject"
	TypeProject        = "Project"
	TypeProjectMember  = "ProjectMember"
	TypeUser           = "User"
)

// CodeEmbeddingMutation represents an operation that mutates the CodeEmbedding nodes in the graph.
type CodeEmbeddingMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	file_name       *string
	file_path       *string
	embedding       *[]float32
	appendembedding []float32
	created_at      *time.Time
	updated_at      *time.Time
	language        *string
	version         *string
	clearedFields   map[string]struct{}
	project         *uuid.UUID
	clearedproject  bool
	done            bool
	oldValue        func(context.Context) (*CodeEmbedding, error)
	predicates      []predicate.CodeEmbedding
}

var _ ent.Mutation = (*CodeEmbeddingMutation)(nil)

// codeembeddingOption allows management of the mutation configuration using functional options.
type codeembeddingOption func(*CodeEmbeddingMutation)

// newCodeEmbeddingMutation creates new mutation for the CodeEmbedding entity.
func newCodeEmbeddingMutation(c config, op Op, opts ...codeembeddingOption) *CodeEmbeddingMutation {
	m := &CodeEmbeddingMutation{
		config:        c,
		op:            op,
		typ:           TypeCodeEmbedding,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCodeEmbeddingID sets the ID field of the mutation.
func withCodeEmbeddingID(id uuid.UUID) codeembeddingOption {
	return func(m *CodeEmbeddingMutation) {
		var (
			err   error
			once  sync.Once
			value *CodeEmbedding
		)
		m.oldValue = func(ctx context.Context) (*CodeEmbedding, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CodeEmbedding.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCodeEmbedding sets the old CodeEmbedding of the mutation.
func withCodeEmbedding(node *CodeEmbedding) codeembeddingOption {
	return func(m *CodeEmbeddingMutation) {
		m.oldValue = func(context.Context) (*CodeEmbedding, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CodeEmbeddingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CodeEmbeddingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CodeEmbedding entities.
func (m *CodeEmbeddingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CodeEmbeddingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CodeEmbeddingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CodeEmbedding.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFileName sets the "file_name" field.
func (m *CodeEmbeddingMutation) SetFileName(s string) {
	m.file_name = &s
}

// FileName returns the value of the "file_name" field in the mutation.
func (m *CodeEmbeddingMutation) FileName() (r string, exists bool) {
	v := m.file_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFileName returns the old "file_name" field's value of the CodeEmbedding entity.
// If the CodeEmbedding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeEmbeddingMutation) OldFileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileName: %w", err)
	}
	return oldValue.FileName, nil
}

// ResetFileName resets all changes to the "file_name" field.
func (m *CodeEmbeddingMutation) ResetFileName() {
	m.file_name = nil
}

// SetFilePath sets the "file_path" field.
func (m *CodeEmbeddingMutation) SetFilePath(s string) {
	m.file_path = &s
}

// FilePath returns the value of the "file_path" field in the mutation.
func (m *CodeEmbeddingMutation) FilePath() (r string, exists bool) {
	v := m.file_path
	if v == nil {
		return
	}
	return *v, true
}

// OldFilePath returns the old "file_path" field's value of the CodeEmbedding entity.
// If the CodeEmbedding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeEmbeddingMutation) OldFilePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilePath: %w", err)
	}
	return oldValue.FilePath, nil
}

// ResetFilePath resets all changes to the "file_path" field.
func (m *CodeEmbeddingMutation) ResetFilePath() {
	m.file_path = nil
}

// SetEmbedding sets the "embedding" field.
func (m *CodeEmbeddingMutation) SetEmbedding(f []float32) {
	m.embedding = &f
	m.appendembedding = nil
}

// Embedding returns the value of the "embedding" field in the mutation.
func (m *CodeEmbeddingMutation) Embedding() (r []float32, exists bool) {
	v := m.embedding
	if v == nil {
		return
	}
	return *v, true
}

// OldEmbedding returns the old "embedding" field's value of the CodeEmbedding entity.
// If the CodeEmbedding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeEmbeddingMutation) OldEmbedding(ctx context.Context) (v []float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmbedding is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmbedding requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmbedding: %w", err)
	}
	return oldValue.Embedding, nil
}

// AppendEmbedding adds f to the "embedding" field.
func (m *CodeEmbeddingMutation) AppendEmbedding(f []float32) {
	m.appendembedding = append(m.appendembedding, f...)
}

// AppendedEmbedding returns the list of values that were appended to the "embedding" field in this mutation.
func (m *CodeEmbeddingMutation) AppendedEmbedding() ([]float32, bool) {
	if len(m.appendembedding) == 0 {
		return nil, false
	}
	return m.appendembedding, true
}

// ClearEmbedding clears the value of the "embedding" field.
func (m *CodeEmbeddingMutation) ClearEmbedding() {
	m.embedding = nil
	m.appendembedding = nil
	m.clearedFields[codeembedding.FieldEmbedding] = struct{}{}
}

// EmbeddingCleared returns if the "embedding" field was cleared in this mutation.
func (m *CodeEmbeddingMutation) EmbeddingCleared() bool {
	_, ok := m.clearedFields[codeembedding.FieldEmbedding]
	return ok
}

// ResetEmbedding resets all changes to the "embedding" field.
func (m *CodeEmbeddingMutation) ResetEmbedding() {
	m.embedding = nil
	m.appendembedding = nil
	delete(m.clearedFields, codeembedding.FieldEmbedding)
}

// SetProjectID sets the "project_id" field.
func (m *CodeEmbeddingMutation) SetProjectID(u uuid.UUID) {
	m.project = &u
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *CodeEmbeddingMutation) ProjectID() (r uuid.UUID, exists bool) {
	v := m.project
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the CodeEmbedding entity.
// If the CodeEmbedding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeEmbeddingMutation) OldProjectID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *CodeEmbeddingMutation) ResetProjectID() {
	m.project = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CodeEmbeddingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CodeEmbeddingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CodeEmbedding entity.
// If the CodeEmbedding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeEmbeddingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CodeEmbeddingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CodeEmbeddingMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CodeEmbeddingMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CodeEmbedding entity.
// If the CodeEmbedding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeEmbeddingMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CodeEmbeddingMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetLanguage sets the "language" field.
func (m *CodeEmbeddingMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *CodeEmbeddingMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the CodeEmbedding entity.
// If the CodeEmbedding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeEmbeddingMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ClearLanguage clears the value of the "language" field.
func (m *CodeEmbeddingMutation) ClearLanguage() {
	m.language = nil
	m.clearedFields[codeembedding.FieldLanguage] = struct{}{}
}

// LanguageCleared returns if the "language" field was cleared in this mutation.
func (m *CodeEmbeddingMutation) LanguageCleared() bool {
	_, ok := m.clearedFields[codeembedding.FieldLanguage]
	return ok
}

// ResetLanguage resets all changes to the "language" field.
func (m *CodeEmbeddingMutation) ResetLanguage() {
	m.language = nil
	delete(m.clearedFields, codeembedding.FieldLanguage)
}

// SetVersion sets the "version" field.
func (m *CodeEmbeddingMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *CodeEmbeddingMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the CodeEmbedding entity.
// If the CodeEmbedding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeEmbeddingMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ClearVersion clears the value of the "version" field.
func (m *CodeEmbeddingMutation) ClearVersion() {
	m.version = nil
	m.clearedFields[codeembedding.FieldVersion] = struct{}{}
}

// VersionCleared returns if the "version" field was cleared in this mutation.
func (m *CodeEmbeddingMutation) VersionCleared() bool {
	_, ok := m.clearedFields[codeembedding.FieldVersion]
	return ok
}

// ResetVersion resets all changes to the "version" field.
func (m *CodeEmbeddingMutation) ResetVersion() {
	m.version = nil
	delete(m.clearedFields, codeembedding.FieldVersion)
}

// ClearProject clears the "project" edge to the Project entity.
func (m *CodeEmbeddingMutation) ClearProject() {
	m.clearedproject = true
	m.clearedFields[codeembedding.FieldProjectID] = struct{}{}
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *CodeEmbeddingMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *CodeEmbeddingMutation) ProjectIDs() (ids []uuid.UUID) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *CodeEmbeddingMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// Where appends a list predicates to the CodeEmbeddingMutation builder.
func (m *CodeEmbeddingMutation) Where(ps ...predicate.CodeEmbedding) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CodeEmbeddingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CodeEmbeddingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CodeEmbedding, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CodeEmbeddingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CodeEmbeddingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CodeEmbedding).
func (m *CodeEmbeddingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CodeEmbeddingMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.file_name != nil {
		fields = append(fields, codeembedding.FieldFileName)
	}
	if m.file_path != nil {
		fields = append(fields, codeembedding.FieldFilePath)
	}
	if m.embedding != nil {
		fields = append(fields, codeembedding.FieldEmbedding)
	}
	if m.project != nil {
		fields = append(fields, codeembedding.FieldProjectID)
	}
	if m.created_at != nil {
		fields = append(fields, codeembedding.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, codeembedding.FieldUpdatedAt)
	}
	if m.language != nil {
		fields = append(fields, codeembedding.FieldLanguage)
	}
	if m.version != nil {
		fields = append(fields, codeembedding.FieldVersion)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CodeEmbeddingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case codeembedding.FieldFileName:
		return m.FileName()
	case codeembedding.FieldFilePath:
		return m.FilePath()
	case codeembedding.FieldEmbedding:
		return m.Embedding()
	case codeembedding.FieldProjectID:
		return m.ProjectID()
	case codeembedding.FieldCreatedAt:
		return m.CreatedAt()
	case codeembedding.FieldUpdatedAt:
		return m.UpdatedAt()
	case codeembedding.FieldLanguage:
		return m.Language()
	case codeembedding.FieldVersion:
		return m.Version()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CodeEmbeddingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case codeembedding.FieldFileName:
		return m.OldFileName(ctx)
	case codeembedding.FieldFilePath:
		return m.OldFilePath(ctx)
	case codeembedding.FieldEmbedding:
		return m.OldEmbedding(ctx)
	case codeembedding.FieldProjectID:
		return m.OldProjectID(ctx)
	case codeembedding.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case codeembedding.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case codeembedding.FieldLanguage:
		return m.OldLanguage(ctx)
	case codeembedding.FieldVersion:
		return m.OldVersion(ctx)
	}
	return nil, fmt.Errorf("unknown CodeEmbedding field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CodeEmbeddingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case codeembedding.FieldFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileName(v)
		return nil
	case codeembedding.FieldFilePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilePath(v)
		return nil
	case codeembedding.FieldEmbedding:
		v, ok := value.([]float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmbedding(v)
		return nil
	case codeembedding.FieldProjectID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case codeembedding.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case codeembedding.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case codeembedding.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case codeembedding.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	}
	return fmt.Errorf("unknown CodeEmbedding field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CodeEmbeddingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CodeEmbeddingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CodeEmbeddingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CodeEmbedding numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CodeEmbeddingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(codeembedding.FieldEmbedding) {
		fields = append(fields, codeembedding.FieldEmbedding)
	}
	if m.FieldCleared(codeembedding.FieldLanguage) {
		fields = append(fields, codeembedding.FieldLanguage)
	}
	if m.FieldCleared(codeembedding.FieldVersion) {
		fields = append(fields, codeembedding.FieldVersion)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CodeEmbeddingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CodeEmbeddingMutation) ClearField(name string) error {
	switch name {
	case codeembedding.FieldEmbedding:
		m.ClearEmbedding()
		return nil
	case codeembedding.FieldLanguage:
		m.ClearLanguage()
		return nil
	case codeembedding.FieldVersion:
		m.ClearVersion()
		return nil
	}
	return fmt.Errorf("unknown CodeEmbedding nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CodeEmbeddingMutation) ResetField(name string) error {
	switch name {
	case codeembedding.FieldFileName:
		m.ResetFileName()
		return nil
	case codeembedding.FieldFilePath:
		m.ResetFilePath()
		return nil
	case codeembedding.FieldEmbedding:
		m.ResetEmbedding()
		return nil
	case codeembedding.FieldProjectID:
		m.ResetProjectID()
		return nil
	case codeembedding.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case codeembedding.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case codeembedding.FieldLanguage:
		m.ResetLanguage()
		return nil
	case codeembedding.FieldVersion:
		m.ResetVersion()
		return nil
	}
	return fmt.Errorf("unknown CodeEmbedding field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CodeEmbeddingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.project != nil {
		edges = append(edges, codeembedding.EdgeProject)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CodeEmbeddingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case codeembedding.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CodeEmbeddingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CodeEmbeddingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CodeEmbeddingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproject {
		edges = append(edges, codeembedding.EdgeProject)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CodeEmbeddingMutation) EdgeCleared(name string) bool {
	switch name {
	case codeembedding.EdgeProject:
		return m.clearedproject
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CodeEmbeddingMutation) ClearEdge(name string) error {
	switch name {
	case codeembedding.EdgeProject:
		m.ClearProject()
		return nil
	}
	return fmt.Errorf("unknown CodeEmbedding unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CodeEmbeddingMutation) ResetEdge(name string) error {
	switch name {
	case codeembedding.EdgeProject:
		m.ResetProject()
		return nil
	}
	return fmt.Errorf("unknown CodeEmbedding edge %s", name)
}

// HistoryMutation represents an operation that mutates the History nodes in the graph.
type HistoryMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	created_at              *time.Time
	action                  *string
	details                 *map[string]interface{}
	ip_address              *string
	clearedFields           map[string]struct{}
	user                    *uuid.UUID
	cleareduser             bool
	project                 *uuid.UUID
	clearedproject          bool
	history_projects        map[uuid.UUID]struct{}
	removedhistory_projects map[uuid.UUID]struct{}
	clearedhistory_projects bool
	done                    bool
	oldValue                func(context.Context) (*History, error)
	predicates              []predicate.History
}

var _ ent.Mutation = (*HistoryMutation)(nil)

// historyOption allows management of the mutation configuration using functional options.
type historyOption func(*HistoryMutation)

// newHistoryMutation creates new mutation for the History entity.
func newHistoryMutation(c config, op Op, opts ...historyOption) *HistoryMutation {
	m := &HistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHistoryID sets the ID field of the mutation.
func withHistoryID(id uuid.UUID) historyOption {
	return func(m *HistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *History
		)
		m.oldValue = func(ctx context.Context) (*History, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().History.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHistory sets the old History of the mutation.
func withHistory(node *History) historyOption {
	return func(m *HistoryMutation) {
		m.oldValue = func(context.Context) (*History, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of History entities.
func (m *HistoryMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HistoryMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HistoryMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().History.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *HistoryMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *HistoryMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the History entity.
// If the History object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *HistoryMutation) ResetUserID() {
	m.user = nil
}

// SetProjectID sets the "project_id" field.
func (m *HistoryMutation) SetProjectID(u uuid.UUID) {
	m.project = &u
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *HistoryMutation) ProjectID() (r uuid.UUID, exists bool) {
	v := m.project
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the History entity.
// If the History object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryMutation) OldProjectID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *HistoryMutation) ResetProjectID() {
	m.project = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *HistoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *HistoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the History entity.
// If the History object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *HistoryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetAction sets the "action" field.
func (m *HistoryMutation) SetAction(s string) {
	m.action = &s
}

// Action returns the value of the "action" field in the mutation.
func (m *HistoryMutation) Action() (r string, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the History entity.
// If the History object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryMutation) OldAction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ResetAction resets all changes to the "action" field.
func (m *HistoryMutation) ResetAction() {
	m.action = nil
}

// SetDetails sets the "details" field.
func (m *HistoryMutation) SetDetails(value map[string]interface{}) {
	m.details = &value
}

// Details returns the value of the "details" field in the mutation.
func (m *HistoryMutation) Details() (r map[string]interface{}, exists bool) {
	v := m.details
	if v == nil {
		return
	}
	return *v, true
}

// OldDetails returns the old "details" field's value of the History entity.
// If the History object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryMutation) OldDetails(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDetails is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDetails requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetails: %w", err)
	}
	return oldValue.Details, nil
}

// ResetDetails resets all changes to the "details" field.
func (m *HistoryMutation) ResetDetails() {
	m.details = nil
}

// SetIPAddress sets the "ip_address" field.
func (m *HistoryMutation) SetIPAddress(s string) {
	m.ip_address = &s
}

// IPAddress returns the value of the "ip_address" field in the mutation.
func (m *HistoryMutation) IPAddress() (r string, exists bool) {
	v := m.ip_address
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddress returns the old "ip_address" field's value of the History entity.
// If the History object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryMutation) OldIPAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddress: %w", err)
	}
	return oldValue.IPAddress, nil
}

// ClearIPAddress clears the value of the "ip_address" field.
func (m *HistoryMutation) ClearIPAddress() {
	m.ip_address = nil
	m.clearedFields[history.FieldIPAddress] = struct{}{}
}

// IPAddressCleared returns if the "ip_address" field was cleared in this mutation.
func (m *HistoryMutation) IPAddressCleared() bool {
	_, ok := m.clearedFields[history.FieldIPAddress]
	return ok
}

// ResetIPAddress resets all changes to the "ip_address" field.
func (m *HistoryMutation) ResetIPAddress() {
	m.ip_address = nil
	delete(m.clearedFields, history.FieldIPAddress)
}

// ClearUser clears the "user" edge to the User entity.
func (m *HistoryMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[history.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *HistoryMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *HistoryMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *HistoryMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearProject clears the "project" edge to the Project entity.
func (m *HistoryMutation) ClearProject() {
	m.clearedproject = true
	m.clearedFields[history.FieldProjectID] = struct{}{}
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *HistoryMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *HistoryMutation) ProjectIDs() (ids []uuid.UUID) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *HistoryMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// AddHistoryProjectIDs adds the "history_projects" edge to the HistoryProject entity by ids.
func (m *HistoryMutation) AddHistoryProjectIDs(ids ...uuid.UUID) {
	if m.history_projects == nil {
		m.history_projects = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.history_projects[ids[i]] = struct{}{}
	}
}

// ClearHistoryProjects clears the "history_projects" edge to the HistoryProject entity.
func (m *HistoryMutation) ClearHistoryProjects() {
	m.clearedhistory_projects = true
}

// HistoryProjectsCleared reports if the "history_projects" edge to the HistoryProject entity was cleared.
func (m *HistoryMutation) HistoryProjectsCleared() bool {
	return m.clearedhistory_projects
}

// RemoveHistoryProjectIDs removes the "history_projects" edge to the HistoryProject entity by IDs.
func (m *HistoryMutation) RemoveHistoryProjectIDs(ids ...uuid.UUID) {
	if m.removedhistory_projects == nil {
		m.removedhistory_projects = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.history_projects, ids[i])
		m.removedhistory_projects[ids[i]] = struct{}{}
	}
}

// RemovedHistoryProjects returns the removed IDs of the "history_projects" edge to the HistoryProject entity.
func (m *HistoryMutation) RemovedHistoryProjectsIDs() (ids []uuid.UUID) {
	for id := range m.removedhistory_projects {
		ids = append(ids, id)
	}
	return
}

// HistoryProjectsIDs returns the "history_projects" edge IDs in the mutation.
func (m *HistoryMutation) HistoryProjectsIDs() (ids []uuid.UUID) {
	for id := range m.history_projects {
		ids = append(ids, id)
	}
	return
}

// ResetHistoryProjects resets all changes to the "history_projects" edge.
func (m *HistoryMutation) ResetHistoryProjects() {
	m.history_projects = nil
	m.clearedhistory_projects = false
	m.removedhistory_projects = nil
}

// Where appends a list predicates to the HistoryMutation builder.
func (m *HistoryMutation) Where(ps ...predicate.History) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HistoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HistoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.History, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HistoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HistoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (History).
func (m *HistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HistoryMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.user != nil {
		fields = append(fields, history.FieldUserID)
	}
	if m.project != nil {
		fields = append(fields, history.FieldProjectID)
	}
	if m.created_at != nil {
		fields = append(fields, history.FieldCreatedAt)
	}
	if m.action != nil {
		fields = append(fields, history.FieldAction)
	}
	if m.details != nil {
		fields = append(fields, history.FieldDetails)
	}
	if m.ip_address != nil {
		fields = append(fields, history.FieldIPAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case history.FieldUserID:
		return m.UserID()
	case history.FieldProjectID:
		return m.ProjectID()
	case history.FieldCreatedAt:
		return m.CreatedAt()
	case history.FieldAction:
		return m.Action()
	case history.FieldDetails:
		return m.Details()
	case history.FieldIPAddress:
		return m.IPAddress()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case history.FieldUserID:
		return m.OldUserID(ctx)
	case history.FieldProjectID:
		return m.OldProjectID(ctx)
	case history.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case history.FieldAction:
		return m.OldAction(ctx)
	case history.FieldDetails:
		return m.OldDetails(ctx)
	case history.FieldIPAddress:
		return m.OldIPAddress(ctx)
	}
	return nil, fmt.Errorf("unknown History field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case history.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case history.FieldProjectID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case history.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case history.FieldAction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	case history.FieldDetails:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetails(v)
		return nil
	case history.FieldIPAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddress(v)
		return nil
	}
	return fmt.Errorf("unknown History field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HistoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HistoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown History numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HistoryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(history.FieldIPAddress) {
		fields = append(fields, history.FieldIPAddress)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HistoryMutation) ClearField(name string) error {
	switch name {
	case history.FieldIPAddress:
		m.ClearIPAddress()
		return nil
	}
	return fmt.Errorf("unknown History nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HistoryMutation) ResetField(name string) error {
	switch name {
	case history.FieldUserID:
		m.ResetUserID()
		return nil
	case history.FieldProjectID:
		m.ResetProjectID()
		return nil
	case history.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case history.FieldAction:
		m.ResetAction()
		return nil
	case history.FieldDetails:
		m.ResetDetails()
		return nil
	case history.FieldIPAddress:
		m.ResetIPAddress()
		return nil
	}
	return fmt.Errorf("unknown History field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, history.EdgeUser)
	}
	if m.project != nil {
		edges = append(edges, history.EdgeProject)
	}
	if m.history_projects != nil {
		edges = append(edges, history.EdgeHistoryProjects)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HistoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case history.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case history.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case history.EdgeHistoryProjects:
		ids := make([]ent.Value, 0, len(m.history_projects))
		for id := range m.history_projects {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedhistory_projects != nil {
		edges = append(edges, history.EdgeHistoryProjects)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HistoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case history.EdgeHistoryProjects:
		ids := make([]ent.Value, 0, len(m.removedhistory_projects))
		for id := range m.removedhistory_projects {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, history.EdgeUser)
	}
	if m.clearedproject {
		edges = append(edges, history.EdgeProject)
	}
	if m.clearedhistory_projects {
		edges = append(edges, history.EdgeHistoryProjects)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HistoryMutation) EdgeCleared(name string) bool {
	switch name {
	case history.EdgeUser:
		return m.cleareduser
	case history.EdgeProject:
		return m.clearedproject
	case history.EdgeHistoryProjects:
		return m.clearedhistory_projects
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HistoryMutation) ClearEdge(name string) error {
	switch name {
	case history.EdgeUser:
		m.ClearUser()
		return nil
	case history.EdgeProject:
		m.ClearProject()
		return nil
	}
	return fmt.Errorf("unknown History unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HistoryMutation) ResetEdge(name string) error {
	switch name {
	case history.EdgeUser:
		m.ResetUser()
		return nil
	case history.EdgeProject:
		m.ResetProject()
		return nil
	case history.EdgeHistoryProjects:
		m.ResetHistoryProjects()
		return nil
	}
	return fmt.Errorf("unknown History edge %s", name)
}

// HistoryProjectMutation represents an operation that mutates the HistoryProject nodes in the graph.
type HistoryProjectMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	created_at     *time.Time
	changes        *map[string]interface{}
	status         *historyproject.Status
	clearedFields  map[string]struct{}
	project        *uuid.UUID
	clearedproject bool
	history        *uuid.UUID
	clearedhistory bool
	done           bool
	oldValue       func(context.Context) (*HistoryProject, error)
	predicates     []predicate.HistoryProject
}

var _ ent.Mutation = (*HistoryProjectMutation)(nil)

// historyprojectOption allows management of the mutation configuration using functional options.
type historyprojectOption func(*HistoryProjectMutation)

// newHistoryProjectMutation creates new mutation for the HistoryProject entity.
func newHistoryProjectMutation(c config, op Op, opts ...historyprojectOption) *HistoryProjectMutation {
	m := &HistoryProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeHistoryProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHistoryProjectID sets the ID field of the mutation.
func withHistoryProjectID(id uuid.UUID) historyprojectOption {
	return func(m *HistoryProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *HistoryProject
		)
		m.oldValue = func(ctx context.Context) (*HistoryProject, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HistoryProject.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHistoryProject sets the old HistoryProject of the mutation.
func withHistoryProject(node *HistoryProject) historyprojectOption {
	return func(m *HistoryProjectMutation) {
		m.oldValue = func(context.Context) (*HistoryProject, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HistoryProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HistoryProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of HistoryProject entities.
func (m *HistoryProjectMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HistoryProjectMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HistoryProjectMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HistoryProject.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProjectID sets the "project_id" field.
func (m *HistoryProjectMutation) SetProjectID(u uuid.UUID) {
	m.project = &u
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *HistoryProjectMutation) ProjectID() (r uuid.UUID, exists bool) {
	v := m.project
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the HistoryProject entity.
// If the HistoryProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryProjectMutation) OldProjectID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *HistoryProjectMutation) ResetProjectID() {
	m.project = nil
}

// SetHistoryID sets the "history_id" field.
func (m *HistoryProjectMutation) SetHistoryID(u uuid.UUID) {
	m.history = &u
}

// HistoryID returns the value of the "history_id" field in the mutation.
func (m *HistoryProjectMutation) HistoryID() (r uuid.UUID, exists bool) {
	v := m.history
	if v == nil {
		return
	}
	return *v, true
}

// OldHistoryID returns the old "history_id" field's value of the HistoryProject entity.
// If the HistoryProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryProjectMutation) OldHistoryID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHistoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHistoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHistoryID: %w", err)
	}
	return oldValue.HistoryID, nil
}

// ResetHistoryID resets all changes to the "history_id" field.
func (m *HistoryProjectMutation) ResetHistoryID() {
	m.history = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *HistoryProjectMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *HistoryProjectMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the HistoryProject entity.
// If the HistoryProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryProjectMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *HistoryProjectMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetChanges sets the "changes" field.
func (m *HistoryProjectMutation) SetChanges(value map[string]interface{}) {
	m.changes = &value
}

// Changes returns the value of the "changes" field in the mutation.
func (m *HistoryProjectMutation) Changes() (r map[string]interface{}, exists bool) {
	v := m.changes
	if v == nil {
		return
	}
	return *v, true
}

// OldChanges returns the old "changes" field's value of the HistoryProject entity.
// If the HistoryProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryProjectMutation) OldChanges(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChanges is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChanges requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChanges: %w", err)
	}
	return oldValue.Changes, nil
}

// ResetChanges resets all changes to the "changes" field.
func (m *HistoryProjectMutation) ResetChanges() {
	m.changes = nil
}

// SetStatus sets the "status" field.
func (m *HistoryProjectMutation) SetStatus(h historyproject.Status) {
	m.status = &h
}

// Status returns the value of the "status" field in the mutation.
func (m *HistoryProjectMutation) Status() (r historyproject.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the HistoryProject entity.
// If the HistoryProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryProjectMutation) OldStatus(ctx context.Context) (v historyproject.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *HistoryProjectMutation) ResetStatus() {
	m.status = nil
}

// ClearProject clears the "project" edge to the Project entity.
func (m *HistoryProjectMutation) ClearProject() {
	m.clearedproject = true
	m.clearedFields[historyproject.FieldProjectID] = struct{}{}
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *HistoryProjectMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *HistoryProjectMutation) ProjectIDs() (ids []uuid.UUID) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *HistoryProjectMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// ClearHistory clears the "history" edge to the History entity.
func (m *HistoryProjectMutation) ClearHistory() {
	m.clearedhistory = true
	m.clearedFields[historyproject.FieldHistoryID] = struct{}{}
}

// HistoryCleared reports if the "history" edge to the History entity was cleared.
func (m *HistoryProjectMutation) HistoryCleared() bool {
	return m.clearedhistory
}

// HistoryIDs returns the "history" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HistoryID instead. It exists only for internal usage by the builders.
func (m *HistoryProjectMutation) HistoryIDs() (ids []uuid.UUID) {
	if id := m.history; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHistory resets all changes to the "history" edge.
func (m *HistoryProjectMutation) ResetHistory() {
	m.history = nil
	m.clearedhistory = false
}

// Where appends a list predicates to the HistoryProjectMutation builder.
func (m *HistoryProjectMutation) Where(ps ...predicate.HistoryProject) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HistoryProjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HistoryProjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.HistoryProject, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HistoryProjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HistoryProjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (HistoryProject).
func (m *HistoryProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HistoryProjectMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.project != nil {
		fields = append(fields, historyproject.FieldProjectID)
	}
	if m.history != nil {
		fields = append(fields, historyproject.FieldHistoryID)
	}
	if m.created_at != nil {
		fields = append(fields, historyproject.FieldCreatedAt)
	}
	if m.changes != nil {
		fields = append(fields, historyproject.FieldChanges)
	}
	if m.status != nil {
		fields = append(fields, historyproject.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HistoryProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case historyproject.FieldProjectID:
		return m.ProjectID()
	case historyproject.FieldHistoryID:
		return m.HistoryID()
	case historyproject.FieldCreatedAt:
		return m.CreatedAt()
	case historyproject.FieldChanges:
		return m.Changes()
	case historyproject.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HistoryProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case historyproject.FieldProjectID:
		return m.OldProjectID(ctx)
	case historyproject.FieldHistoryID:
		return m.OldHistoryID(ctx)
	case historyproject.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case historyproject.FieldChanges:
		return m.OldChanges(ctx)
	case historyproject.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown HistoryProject field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HistoryProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case historyproject.FieldProjectID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case historyproject.FieldHistoryID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHistoryID(v)
		return nil
	case historyproject.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case historyproject.FieldChanges:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChanges(v)
		return nil
	case historyproject.FieldStatus:
		v, ok := value.(historyproject.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown HistoryProject field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HistoryProjectMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HistoryProjectMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HistoryProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown HistoryProject numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HistoryProjectMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HistoryProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HistoryProjectMutation) ClearField(name string) error {
	return fmt.Errorf("unknown HistoryProject nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HistoryProjectMutation) ResetField(name string) error {
	switch name {
	case historyproject.FieldProjectID:
		m.ResetProjectID()
		return nil
	case historyproject.FieldHistoryID:
		m.ResetHistoryID()
		return nil
	case historyproject.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case historyproject.FieldChanges:
		m.ResetChanges()
		return nil
	case historyproject.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown HistoryProject field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HistoryProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.project != nil {
		edges = append(edges, historyproject.EdgeProject)
	}
	if m.history != nil {
		edges = append(edges, historyproject.EdgeHistory)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HistoryProjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case historyproject.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case historyproject.EdgeHistory:
		if id := m.history; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HistoryProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HistoryProjectMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HistoryProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedproject {
		edges = append(edges, historyproject.EdgeProject)
	}
	if m.clearedhistory {
		edges = append(edges, historyproject.EdgeHistory)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HistoryProjectMutation) EdgeCleared(name string) bool {
	switch name {
	case historyproject.EdgeProject:
		return m.clearedproject
	case historyproject.EdgeHistory:
		return m.clearedhistory
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HistoryProjectMutation) ClearEdge(name string) error {
	switch name {
	case historyproject.EdgeProject:
		m.ClearProject()
		return nil
	case historyproject.EdgeHistory:
		m.ClearHistory()
		return nil
	}
	return fmt.Errorf("unknown HistoryProject unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HistoryProjectMutation) ResetEdge(name string) error {
	switch name {
	case historyproject.EdgeProject:
		m.ResetProject()
		return nil
	case historyproject.EdgeHistory:
		m.ResetHistory()
		return nil
	}
	return fmt.Errorf("unknown HistoryProject edge %s", name)
}

// ProjectMutation represents an operation that mutates the Project nodes in the graph.
type ProjectMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	name                    *string
	description             *string
	git_repository_url      *string
	created_at              *time.Time
	updated_at              *time.Time
	status                  *project.Status
	settings                *map[string]interface{}
	clearedFields           map[string]struct{}
	owner                   *uuid.UUID
	clearedowner            bool
	members                 map[uuid.UUID]struct{}
	removedmembers          map[uuid.UUID]struct{}
	clearedmembers          bool
	code_embeddings         map[uuid.UUID]struct{}
	removedcode_embeddings  map[uuid.UUID]struct{}
	clearedcode_embeddings  bool
	histories               map[uuid.UUID]struct{}
	removedhistories        map[uuid.UUID]struct{}
	clearedhistories        bool
	history_projects        map[uuid.UUID]struct{}
	removedhistory_projects map[uuid.UUID]struct{}
	clearedhistory_projects bool
	done                    bool
	oldValue                func(context.Context) (*Project, error)
	predicates              []predicate.Project
}

var _ ent.Mutation = (*ProjectMutation)(nil)

// projectOption allows management of the mutation configuration using functional options.
type projectOption func(*ProjectMutation)

// newProjectMutation creates new mutation for the Project entity.
func newProjectMutation(c config, op Op, opts ...projectOption) *ProjectMutation {
	m := &ProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectID sets the ID field of the mutation.
func withProjectID(id uuid.UUID) projectOption {
	return func(m *ProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Project
		)
		m.oldValue = func(ctx context.Context) (*Project, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Project.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProject sets the old Project of the mutation.
func withProject(node *Project) projectOption {
	return func(m *ProjectMutation) {
		m.oldValue = func(context.Context) (*Project, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Project entities.
func (m *ProjectMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProjectMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Project.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProjectMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ProjectMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProjectMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ProjectMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[project.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ProjectMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[project.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ProjectMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, project.FieldDescription)
}

// SetGitRepositoryURL sets the "git_repository_url" field.
func (m *ProjectMutation) SetGitRepositoryURL(s string) {
	m.git_repository_url = &s
}

// GitRepositoryURL returns the value of the "git_repository_url" field in the mutation.
func (m *ProjectMutation) GitRepositoryURL() (r string, exists bool) {
	v := m.git_repository_url
	if v == nil {
		return
	}
	return *v, true
}

// OldGitRepositoryURL returns the old "git_repository_url" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldGitRepositoryURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGitRepositoryURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGitRepositoryURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGitRepositoryURL: %w", err)
	}
	return oldValue.GitRepositoryURL, nil
}

// ClearGitRepositoryURL clears the value of the "git_repository_url" field.
func (m *ProjectMutation) ClearGitRepositoryURL() {
	m.git_repository_url = nil
	m.clearedFields[project.FieldGitRepositoryURL] = struct{}{}
}

// GitRepositoryURLCleared returns if the "git_repository_url" field was cleared in this mutation.
func (m *ProjectMutation) GitRepositoryURLCleared() bool {
	_, ok := m.clearedFields[project.FieldGitRepositoryURL]
	return ok
}

// ResetGitRepositoryURL resets all changes to the "git_repository_url" field.
func (m *ProjectMutation) ResetGitRepositoryURL() {
	m.git_repository_url = nil
	delete(m.clearedFields, project.FieldGitRepositoryURL)
}

// SetCreatedAt sets the "created_at" field.
func (m *ProjectMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProjectMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProjectMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProjectMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProjectMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProjectMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetStatus sets the "status" field.
func (m *ProjectMutation) SetStatus(pr project.Status) {
	m.status = &pr
}

// Status returns the value of the "status" field in the mutation.
func (m *ProjectMutation) Status() (r project.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldStatus(ctx context.Context) (v project.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ProjectMutation) ResetStatus() {
	m.status = nil
}

// SetOwnerID sets the "owner_id" field.
func (m *ProjectMutation) SetOwnerID(u uuid.UUID) {
	m.owner = &u
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *ProjectMutation) OwnerID() (r uuid.UUID, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldOwnerID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *ProjectMutation) ResetOwnerID() {
	m.owner = nil
}

// SetSettings sets the "settings" field.
func (m *ProjectMutation) SetSettings(value map[string]interface{}) {
	m.settings = &value
}

// Settings returns the value of the "settings" field in the mutation.
func (m *ProjectMutation) Settings() (r map[string]interface{}, exists bool) {
	v := m.settings
	if v == nil {
		return
	}
	return *v, true
}

// OldSettings returns the old "settings" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldSettings(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSettings is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSettings requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSettings: %w", err)
	}
	return oldValue.Settings, nil
}

// ResetSettings resets all changes to the "settings" field.
func (m *ProjectMutation) ResetSettings() {
	m.settings = nil
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *ProjectMutation) ClearOwner() {
	m.clearedowner = true
	m.clearedFields[project.FieldOwnerID] = struct{}{}
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *ProjectMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *ProjectMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *ProjectMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddMemberIDs adds the "members" edge to the ProjectMember entity by ids.
func (m *ProjectMutation) AddMemberIDs(ids ...uuid.UUID) {
	if m.members == nil {
		m.members = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.members[ids[i]] = struct{}{}
	}
}

// ClearMembers clears the "members" edge to the ProjectMember entity.
func (m *ProjectMutation) ClearMembers() {
	m.clearedmembers = true
}

// MembersCleared reports if the "members" edge to the ProjectMember entity was cleared.
func (m *ProjectMutation) MembersCleared() bool {
	return m.clearedmembers
}

// RemoveMemberIDs removes the "members" edge to the ProjectMember entity by IDs.
func (m *ProjectMutation) RemoveMemberIDs(ids ...uuid.UUID) {
	if m.removedmembers == nil {
		m.removedmembers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.members, ids[i])
		m.removedmembers[ids[i]] = struct{}{}
	}
}

// RemovedMembers returns the removed IDs of the "members" edge to the ProjectMember entity.
func (m *ProjectMutation) RemovedMembersIDs() (ids []uuid.UUID) {
	for id := range m.removedmembers {
		ids = append(ids, id)
	}
	return
}

// MembersIDs returns the "members" edge IDs in the mutation.
func (m *ProjectMutation) MembersIDs() (ids []uuid.UUID) {
	for id := range m.members {
		ids = append(ids, id)
	}
	return
}

// ResetMembers resets all changes to the "members" edge.
func (m *ProjectMutation) ResetMembers() {
	m.members = nil
	m.clearedmembers = false
	m.removedmembers = nil
}

// AddCodeEmbeddingIDs adds the "code_embeddings" edge to the CodeEmbedding entity by ids.
func (m *ProjectMutation) AddCodeEmbeddingIDs(ids ...uuid.UUID) {
	if m.code_embeddings == nil {
		m.code_embeddings = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.code_embeddings[ids[i]] = struct{}{}
	}
}

// ClearCodeEmbeddings clears the "code_embeddings" edge to the CodeEmbedding entity.
func (m *ProjectMutation) ClearCodeEmbeddings() {
	m.clearedcode_embeddings = true
}

// CodeEmbeddingsCleared reports if the "code_embeddings" edge to the CodeEmbedding entity was cleared.
func (m *ProjectMutation) CodeEmbeddingsCleared() bool {
	return m.clearedcode_embeddings
}

// RemoveCodeEmbeddingIDs removes the "code_embeddings" edge to the CodeEmbedding entity by IDs.
func (m *ProjectMutation) RemoveCodeEmbeddingIDs(ids ...uuid.UUID) {
	if m.removedcode_embeddings == nil {
		m.removedcode_embeddings = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.code_embeddings, ids[i])
		m.removedcode_embeddings[ids[i]] = struct{}{}
	}
}

// RemovedCodeEmbeddings returns the removed IDs of the "code_embeddings" edge to the CodeEmbedding entity.
func (m *ProjectMutation) RemovedCodeEmbeddingsIDs() (ids []uuid.UUID) {
	for id := range m.removedcode_embeddings {
		ids = append(ids, id)
	}
	return
}

// CodeEmbeddingsIDs returns the "code_embeddings" edge IDs in the mutation.
func (m *ProjectMutation) CodeEmbeddingsIDs() (ids []uuid.UUID) {
	for id := range m.code_embeddings {
		ids = append(ids, id)
	}
	return
}

// ResetCodeEmbeddings resets all changes to the "code_embeddings" edge.
func (m *ProjectMutation) ResetCodeEmbeddings() {
	m.code_embeddings = nil
	m.clearedcode_embeddings = false
	m.removedcode_embeddings = nil
}

// AddHistoryIDs adds the "histories" edge to the History entity by ids.
func (m *ProjectMutation) AddHistoryIDs(ids ...uuid.UUID) {
	if m.histories == nil {
		m.histories = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.histories[ids[i]] = struct{}{}
	}
}

// ClearHistories clears the "histories" edge to the History entity.
func (m *ProjectMutation) ClearHistories() {
	m.clearedhistories = true
}

// HistoriesCleared reports if the "histories" edge to the History entity was cleared.
func (m *ProjectMutation) HistoriesCleared() bool {
	return m.clearedhistories
}

// RemoveHistoryIDs removes the "histories" edge to the History entity by IDs.
func (m *ProjectMutation) RemoveHistoryIDs(ids ...uuid.UUID) {
	if m.removedhistories == nil {
		m.removedhistories = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.histories, ids[i])
		m.removedhistories[ids[i]] = struct{}{}
	}
}

// RemovedHistories returns the removed IDs of the "histories" edge to the History entity.
func (m *ProjectMutation) RemovedHistoriesIDs() (ids []uuid.UUID) {
	for id := range m.removedhistories {
		ids = append(ids, id)
	}
	return
}

// HistoriesIDs returns the "histories" edge IDs in the mutation.
func (m *ProjectMutation) HistoriesIDs() (ids []uuid.UUID) {
	for id := range m.histories {
		ids = append(ids, id)
	}
	return
}

// ResetHistories resets all changes to the "histories" edge.
func (m *ProjectMutation) ResetHistories() {
	m.histories = nil
	m.clearedhistories = false
	m.removedhistories = nil
}

// AddHistoryProjectIDs adds the "history_projects" edge to the HistoryProject entity by ids.
func (m *ProjectMutation) AddHistoryProjectIDs(ids ...uuid.UUID) {
	if m.history_projects == nil {
		m.history_projects = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.history_projects[ids[i]] = struct{}{}
	}
}

// ClearHistoryProjects clears the "history_projects" edge to the HistoryProject entity.
func (m *ProjectMutation) ClearHistoryProjects() {
	m.clearedhistory_projects = true
}

// HistoryProjectsCleared reports if the "history_projects" edge to the HistoryProject entity was cleared.
func (m *ProjectMutation) HistoryProjectsCleared() bool {
	return m.clearedhistory_projects
}

// RemoveHistoryProjectIDs removes the "history_projects" edge to the HistoryProject entity by IDs.
func (m *ProjectMutation) RemoveHistoryProjectIDs(ids ...uuid.UUID) {
	if m.removedhistory_projects == nil {
		m.removedhistory_projects = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.history_projects, ids[i])
		m.removedhistory_projects[ids[i]] = struct{}{}
	}
}

// RemovedHistoryProjects returns the removed IDs of the "history_projects" edge to the HistoryProject entity.
func (m *ProjectMutation) RemovedHistoryProjectsIDs() (ids []uuid.UUID) {
	for id := range m.removedhistory_projects {
		ids = append(ids, id)
	}
	return
}

// HistoryProjectsIDs returns the "history_projects" edge IDs in the mutation.
func (m *ProjectMutation) HistoryProjectsIDs() (ids []uuid.UUID) {
	for id := range m.history_projects {
		ids = append(ids, id)
	}
	return
}

// ResetHistoryProjects resets all changes to the "history_projects" edge.
func (m *ProjectMutation) ResetHistoryProjects() {
	m.history_projects = nil
	m.clearedhistory_projects = false
	m.removedhistory_projects = nil
}

// Where appends a list predicates to the ProjectMutation builder.
func (m *ProjectMutation) Where(ps ...predicate.Project) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Project, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Project).
func (m *ProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.name != nil {
		fields = append(fields, project.FieldName)
	}
	if m.description != nil {
		fields = append(fields, project.FieldDescription)
	}
	if m.git_repository_url != nil {
		fields = append(fields, project.FieldGitRepositoryURL)
	}
	if m.created_at != nil {
		fields = append(fields, project.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, project.FieldUpdatedAt)
	}
	if m.status != nil {
		fields = append(fields, project.FieldStatus)
	}
	if m.owner != nil {
		fields = append(fields, project.FieldOwnerID)
	}
	if m.settings != nil {
		fields = append(fields, project.FieldSettings)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case project.FieldName:
		return m.Name()
	case project.FieldDescription:
		return m.Description()
	case project.FieldGitRepositoryURL:
		return m.GitRepositoryURL()
	case project.FieldCreatedAt:
		return m.CreatedAt()
	case project.FieldUpdatedAt:
		return m.UpdatedAt()
	case project.FieldStatus:
		return m.Status()
	case project.FieldOwnerID:
		return m.OwnerID()
	case project.FieldSettings:
		return m.Settings()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case project.FieldName:
		return m.OldName(ctx)
	case project.FieldDescription:
		return m.OldDescription(ctx)
	case project.FieldGitRepositoryURL:
		return m.OldGitRepositoryURL(ctx)
	case project.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case project.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case project.FieldStatus:
		return m.OldStatus(ctx)
	case project.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case project.FieldSettings:
		return m.OldSettings(ctx)
	}
	return nil, fmt.Errorf("unknown Project field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case project.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case project.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case project.FieldGitRepositoryURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGitRepositoryURL(v)
		return nil
	case project.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case project.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case project.FieldStatus:
		v, ok := value.(project.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case project.FieldOwnerID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case project.FieldSettings:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSettings(v)
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Project numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(project.FieldDescription) {
		fields = append(fields, project.FieldDescription)
	}
	if m.FieldCleared(project.FieldGitRepositoryURL) {
		fields = append(fields, project.FieldGitRepositoryURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectMutation) ClearField(name string) error {
	switch name {
	case project.FieldDescription:
		m.ClearDescription()
		return nil
	case project.FieldGitRepositoryURL:
		m.ClearGitRepositoryURL()
		return nil
	}
	return fmt.Errorf("unknown Project nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectMutation) ResetField(name string) error {
	switch name {
	case project.FieldName:
		m.ResetName()
		return nil
	case project.FieldDescription:
		m.ResetDescription()
		return nil
	case project.FieldGitRepositoryURL:
		m.ResetGitRepositoryURL()
		return nil
	case project.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case project.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case project.FieldStatus:
		m.ResetStatus()
		return nil
	case project.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case project.FieldSettings:
		m.ResetSettings()
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.owner != nil {
		edges = append(edges, project.EdgeOwner)
	}
	if m.members != nil {
		edges = append(edges, project.EdgeMembers)
	}
	if m.code_embeddings != nil {
		edges = append(edges, project.EdgeCodeEmbeddings)
	}
	if m.histories != nil {
		edges = append(edges, project.EdgeHistories)
	}
	if m.history_projects != nil {
		edges = append(edges, project.EdgeHistoryProjects)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case project.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.members))
		for id := range m.members {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeCodeEmbeddings:
		ids := make([]ent.Value, 0, len(m.code_embeddings))
		for id := range m.code_embeddings {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeHistories:
		ids := make([]ent.Value, 0, len(m.histories))
		for id := range m.histories {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeHistoryProjects:
		ids := make([]ent.Value, 0, len(m.history_projects))
		for id := range m.history_projects {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedmembers != nil {
		edges = append(edges, project.EdgeMembers)
	}
	if m.removedcode_embeddings != nil {
		edges = append(edges, project.EdgeCodeEmbeddings)
	}
	if m.removedhistories != nil {
		edges = append(edges, project.EdgeHistories)
	}
	if m.removedhistory_projects != nil {
		edges = append(edges, project.EdgeHistoryProjects)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.removedmembers))
		for id := range m.removedmembers {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeCodeEmbeddings:
		ids := make([]ent.Value, 0, len(m.removedcode_embeddings))
		for id := range m.removedcode_embeddings {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeHistories:
		ids := make([]ent.Value, 0, len(m.removedhistories))
		for id := range m.removedhistories {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeHistoryProjects:
		ids := make([]ent.Value, 0, len(m.removedhistory_projects))
		for id := range m.removedhistory_projects {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedowner {
		edges = append(edges, project.EdgeOwner)
	}
	if m.clearedmembers {
		edges = append(edges, project.EdgeMembers)
	}
	if m.clearedcode_embeddings {
		edges = append(edges, project.EdgeCodeEmbeddings)
	}
	if m.clearedhistories {
		edges = append(edges, project.EdgeHistories)
	}
	if m.clearedhistory_projects {
		edges = append(edges, project.EdgeHistoryProjects)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectMutation) EdgeCleared(name string) bool {
	switch name {
	case project.EdgeOwner:
		return m.clearedowner
	case project.EdgeMembers:
		return m.clearedmembers
	case project.EdgeCodeEmbeddings:
		return m.clearedcode_embeddings
	case project.EdgeHistories:
		return m.clearedhistories
	case project.EdgeHistoryProjects:
		return m.clearedhistory_projects
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectMutation) ClearEdge(name string) error {
	switch name {
	case project.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Project unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectMutation) ResetEdge(name string) error {
	switch name {
	case project.EdgeOwner:
		m.ResetOwner()
		return nil
	case project.EdgeMembers:
		m.ResetMembers()
		return nil
	case project.EdgeCodeEmbeddings:
		m.ResetCodeEmbeddings()
		return nil
	case project.EdgeHistories:
		m.ResetHistories()
		return nil
	case project.EdgeHistoryProjects:
		m.ResetHistoryProjects()
		return nil
	}
	return fmt.Errorf("unknown Project edge %s", name)
}

// ProjectMemberMutation represents an operation that mutates the ProjectMember nodes in the graph.
type ProjectMemberMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	created_at     *time.Time
	updated_at     *time.Time
	role           *projectmember.Role
	status         *projectmember.Status
	clearedFields  map[string]struct{}
	project        *uuid.UUID
	clearedproject bool
	user           *uuid.UUID
	cleareduser    bool
	done           bool
	oldValue       func(context.Context) (*ProjectMember, error)
	predicates     []predicate.ProjectMember
}

var _ ent.Mutation = (*ProjectMemberMutation)(nil)

// projectmemberOption allows management of the mutation configuration using functional options.
type projectmemberOption func(*ProjectMemberMutation)

// newProjectMemberMutation creates new mutation for the ProjectMember entity.
func newProjectMemberMutation(c config, op Op, opts ...projectmemberOption) *ProjectMemberMutation {
	m := &ProjectMemberMutation{
		config:        c,
		op:            op,
		typ:           TypeProjectMember,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectMemberID sets the ID field of the mutation.
func withProjectMemberID(id uuid.UUID) projectmemberOption {
	return func(m *ProjectMemberMutation) {
		var (
			err   error
			once  sync.Once
			value *ProjectMember
		)
		m.oldValue = func(ctx context.Context) (*ProjectMember, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProjectMember.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProjectMember sets the old ProjectMember of the mutation.
func withProjectMember(node *ProjectMember) projectmemberOption {
	return func(m *ProjectMemberMutation) {
		m.oldValue = func(context.Context) (*ProjectMember, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectMemberMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectMemberMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProjectMember entities.
func (m *ProjectMemberMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectMemberMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProjectMemberMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProjectMember.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProjectID sets the "project_id" field.
func (m *ProjectMemberMutation) SetProjectID(u uuid.UUID) {
	m.project = &u
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *ProjectMemberMutation) ProjectID() (r uuid.UUID, exists bool) {
	v := m.project
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the ProjectMember entity.
// If the ProjectMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMemberMutation) OldProjectID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *ProjectMemberMutation) ResetProjectID() {
	m.project = nil
}

// SetUserID sets the "user_id" field.
func (m *ProjectMemberMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ProjectMemberMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ProjectMember entity.
// If the ProjectMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMemberMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ProjectMemberMutation) ResetUserID() {
	m.user = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProjectMemberMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProjectMemberMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProjectMember entity.
// If the ProjectMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMemberMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProjectMemberMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProjectMemberMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProjectMemberMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProjectMember entity.
// If the ProjectMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMemberMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProjectMemberMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetRole sets the "role" field.
func (m *ProjectMemberMutation) SetRole(pr projectmember.Role) {
	m.role = &pr
}

// Role returns the value of the "role" field in the mutation.
func (m *ProjectMemberMutation) Role() (r projectmember.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the ProjectMember entity.
// If the ProjectMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMemberMutation) OldRole(ctx context.Context) (v projectmember.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *ProjectMemberMutation) ResetRole() {
	m.role = nil
}

// SetStatus sets the "status" field.
func (m *ProjectMemberMutation) SetStatus(pr projectmember.Status) {
	m.status = &pr
}

// Status returns the value of the "status" field in the mutation.
func (m *ProjectMemberMutation) Status() (r projectmember.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ProjectMember entity.
// If the ProjectMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMemberMutation) OldStatus(ctx context.Context) (v projectmember.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ProjectMemberMutation) ResetStatus() {
	m.status = nil
}

// ClearProject clears the "project" edge to the Project entity.
func (m *ProjectMemberMutation) ClearProject() {
	m.clearedproject = true
	m.clearedFields[projectmember.FieldProjectID] = struct{}{}
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *ProjectMemberMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *ProjectMemberMutation) ProjectIDs() (ids []uuid.UUID) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *ProjectMemberMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *ProjectMemberMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[projectmember.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ProjectMemberMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ProjectMemberMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ProjectMemberMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the ProjectMemberMutation builder.
func (m *ProjectMemberMutation) Where(ps ...predicate.ProjectMember) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProjectMemberMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProjectMemberMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProjectMember, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProjectMemberMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProjectMemberMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProjectMember).
func (m *ProjectMemberMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectMemberMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.project != nil {
		fields = append(fields, projectmember.FieldProjectID)
	}
	if m.user != nil {
		fields = append(fields, projectmember.FieldUserID)
	}
	if m.created_at != nil {
		fields = append(fields, projectmember.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, projectmember.FieldUpdatedAt)
	}
	if m.role != nil {
		fields = append(fields, projectmember.FieldRole)
	}
	if m.status != nil {
		fields = append(fields, projectmember.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectMemberMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case projectmember.FieldProjectID:
		return m.ProjectID()
	case projectmember.FieldUserID:
		return m.UserID()
	case projectmember.FieldCreatedAt:
		return m.CreatedAt()
	case projectmember.FieldUpdatedAt:
		return m.UpdatedAt()
	case projectmember.FieldRole:
		return m.Role()
	case projectmember.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectMemberMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case projectmember.FieldProjectID:
		return m.OldProjectID(ctx)
	case projectmember.FieldUserID:
		return m.OldUserID(ctx)
	case projectmember.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case projectmember.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case projectmember.FieldRole:
		return m.OldRole(ctx)
	case projectmember.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown ProjectMember field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMemberMutation) SetField(name string, value ent.Value) error {
	switch name {
	case projectmember.FieldProjectID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case projectmember.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case projectmember.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case projectmember.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case projectmember.FieldRole:
		v, ok := value.(projectmember.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case projectmember.FieldStatus:
		v, ok := value.(projectmember.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown ProjectMember field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectMemberMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectMemberMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMemberMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProjectMember numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectMemberMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectMemberMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectMemberMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProjectMember nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectMemberMutation) ResetField(name string) error {
	switch name {
	case projectmember.FieldProjectID:
		m.ResetProjectID()
		return nil
	case projectmember.FieldUserID:
		m.ResetUserID()
		return nil
	case projectmember.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case projectmember.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case projectmember.FieldRole:
		m.ResetRole()
		return nil
	case projectmember.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown ProjectMember field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectMemberMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.project != nil {
		edges = append(edges, projectmember.EdgeProject)
	}
	if m.user != nil {
		edges = append(edges, projectmember.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectMemberMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case projectmember.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case projectmember.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectMemberMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectMemberMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectMemberMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedproject {
		edges = append(edges, projectmember.EdgeProject)
	}
	if m.cleareduser {
		edges = append(edges, projectmember.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectMemberMutation) EdgeCleared(name string) bool {
	switch name {
	case projectmember.EdgeProject:
		return m.clearedproject
	case projectmember.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectMemberMutation) ClearEdge(name string) error {
	switch name {
	case projectmember.EdgeProject:
		m.ClearProject()
		return nil
	case projectmember.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown ProjectMember unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectMemberMutation) ResetEdge(name string) error {
	switch name {
	case projectmember.EdgeProject:
		m.ResetProject()
		return nil
	case projectmember.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown ProjectMember edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                         Op
	typ                        string
	id                         *uuid.UUID
	email                      *string
	password                   *string
	name                       *string
	created_at                 *time.Time
	updated_at                 *time.Time
	last_login                 *time.Time
	status                     *user.Status
	role                       *user.Role
	clearedFields              map[string]struct{}
	owned_projects             map[uuid.UUID]struct{}
	removedowned_projects      map[uuid.UUID]struct{}
	clearedowned_projects      bool
	project_memberships        map[uuid.UUID]struct{}
	removedproject_memberships map[uuid.UUID]struct{}
	clearedproject_memberships bool
	histories                  map[uuid.UUID]struct{}
	removedhistories           map[uuid.UUID]struct{}
	clearedhistories           bool
	done                       bool
	oldValue                   func(context.Context) (*User, error)
	predicates                 []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetLastLogin sets the "last_login" field.
func (m *UserMutation) SetLastLogin(t time.Time) {
	m.last_login = &t
}

// LastLogin returns the value of the "last_login" field in the mutation.
func (m *UserMutation) LastLogin() (r time.Time, exists bool) {
	v := m.last_login
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLogin returns the old "last_login" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastLogin(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLogin: %w", err)
	}
	return oldValue.LastLogin, nil
}

// ClearLastLogin clears the value of the "last_login" field.
func (m *UserMutation) ClearLastLogin() {
	m.last_login = nil
	m.clearedFields[user.FieldLastLogin] = struct{}{}
}

// LastLoginCleared returns if the "last_login" field was cleared in this mutation.
func (m *UserMutation) LastLoginCleared() bool {
	_, ok := m.clearedFields[user.FieldLastLogin]
	return ok
}

// ResetLastLogin resets all changes to the "last_login" field.
func (m *UserMutation) ResetLastLogin() {
	m.last_login = nil
	delete(m.clearedFields, user.FieldLastLogin)
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(u user.Status) {
	m.status = &u
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r user.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v user.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(u user.Role) {
	m.role = &u
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r user.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v user.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// AddOwnedProjectIDs adds the "owned_projects" edge to the Project entity by ids.
func (m *UserMutation) AddOwnedProjectIDs(ids ...uuid.UUID) {
	if m.owned_projects == nil {
		m.owned_projects = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.owned_projects[ids[i]] = struct{}{}
	}
}

// ClearOwnedProjects clears the "owned_projects" edge to the Project entity.
func (m *UserMutation) ClearOwnedProjects() {
	m.clearedowned_projects = true
}

// OwnedProjectsCleared reports if the "owned_projects" edge to the Project entity was cleared.
func (m *UserMutation) OwnedProjectsCleared() bool {
	return m.clearedowned_projects
}

// RemoveOwnedProjectIDs removes the "owned_projects" edge to the Project entity by IDs.
func (m *UserMutation) RemoveOwnedProjectIDs(ids ...uuid.UUID) {
	if m.removedowned_projects == nil {
		m.removedowned_projects = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.owned_projects, ids[i])
		m.removedowned_projects[ids[i]] = struct{}{}
	}
}

// RemovedOwnedProjects returns the removed IDs of the "owned_projects" edge to the Project entity.
func (m *UserMutation) RemovedOwnedProjectsIDs() (ids []uuid.UUID) {
	for id := range m.removedowned_projects {
		ids = append(ids, id)
	}
	return
}

// OwnedProjectsIDs returns the "owned_projects" edge IDs in the mutation.
func (m *UserMutation) OwnedProjectsIDs() (ids []uuid.UUID) {
	for id := range m.owned_projects {
		ids = append(ids, id)
	}
	return
}

// ResetOwnedProjects resets all changes to the "owned_projects" edge.
func (m *UserMutation) ResetOwnedProjects() {
	m.owned_projects = nil
	m.clearedowned_projects = false
	m.removedowned_projects = nil
}

// AddProjectMembershipIDs adds the "project_memberships" edge to the ProjectMember entity by ids.
func (m *UserMutation) AddProjectMembershipIDs(ids ...uuid.UUID) {
	if m.project_memberships == nil {
		m.project_memberships = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.project_memberships[ids[i]] = struct{}{}
	}
}

// ClearProjectMemberships clears the "project_memberships" edge to the ProjectMember entity.
func (m *UserMutation) ClearProjectMemberships() {
	m.clearedproject_memberships = true
}

// ProjectMembershipsCleared reports if the "project_memberships" edge to the ProjectMember entity was cleared.
func (m *UserMutation) ProjectMembershipsCleared() bool {
	return m.clearedproject_memberships
}

// RemoveProjectMembershipIDs removes the "project_memberships" edge to the ProjectMember entity by IDs.
func (m *UserMutation) RemoveProjectMembershipIDs(ids ...uuid.UUID) {
	if m.removedproject_memberships == nil {
		m.removedproject_memberships = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.project_memberships, ids[i])
		m.removedproject_memberships[ids[i]] = struct{}{}
	}
}

// RemovedProjectMemberships returns the removed IDs of the "project_memberships" edge to the ProjectMember entity.
func (m *UserMutation) RemovedProjectMembershipsIDs() (ids []uuid.UUID) {
	for id := range m.removedproject_memberships {
		ids = append(ids, id)
	}
	return
}

// ProjectMembershipsIDs returns the "project_memberships" edge IDs in the mutation.
func (m *UserMutation) ProjectMembershipsIDs() (ids []uuid.UUID) {
	for id := range m.project_memberships {
		ids = append(ids, id)
	}
	return
}

// ResetProjectMemberships resets all changes to the "project_memberships" edge.
func (m *UserMutation) ResetProjectMemberships() {
	m.project_memberships = nil
	m.clearedproject_memberships = false
	m.removedproject_memberships = nil
}

// AddHistoryIDs adds the "histories" edge to the History entity by ids.
func (m *UserMutation) AddHistoryIDs(ids ...uuid.UUID) {
	if m.histories == nil {
		m.histories = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.histories[ids[i]] = struct{}{}
	}
}

// ClearHistories clears the "histories" edge to the History entity.
func (m *UserMutation) ClearHistories() {
	m.clearedhistories = true
}

// HistoriesCleared reports if the "histories" edge to the History entity was cleared.
func (m *UserMutation) HistoriesCleared() bool {
	return m.clearedhistories
}

// RemoveHistoryIDs removes the "histories" edge to the History entity by IDs.
func (m *UserMutation) RemoveHistoryIDs(ids ...uuid.UUID) {
	if m.removedhistories == nil {
		m.removedhistories = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.histories, ids[i])
		m.removedhistories[ids[i]] = struct{}{}
	}
}

// RemovedHistories returns the removed IDs of the "histories" edge to the History entity.
func (m *UserMutation) RemovedHistoriesIDs() (ids []uuid.UUID) {
	for id := range m.removedhistories {
		ids = append(ids, id)
	}
	return
}

// HistoriesIDs returns the "histories" edge IDs in the mutation.
func (m *UserMutation) HistoriesIDs() (ids []uuid.UUID) {
	for id := range m.histories {
		ids = append(ids, id)
	}
	return
}

// ResetHistories resets all changes to the "histories" edge.
func (m *UserMutation) ResetHistories() {
	m.histories = nil
	m.clearedhistories = false
	m.removedhistories = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.last_login != nil {
		fields = append(fields, user.FieldLastLogin)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldName:
		return m.Name()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldLastLogin:
		return m.LastLogin()
	case user.FieldStatus:
		return m.Status()
	case user.FieldRole:
		return m.Role()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldLastLogin:
		return m.OldLastLogin(ctx)
	case user.FieldStatus:
		return m.OldStatus(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldLastLogin:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLogin(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(user.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case user.FieldRole:
		v, ok := value.(user.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldLastLogin) {
		fields = append(fields, user.FieldLastLogin)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldLastLogin:
		m.ClearLastLogin()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldLastLogin:
		m.ResetLastLogin()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.owned_projects != nil {
		edges = append(edges, user.EdgeOwnedProjects)
	}
	if m.project_memberships != nil {
		edges = append(edges, user.EdgeProjectMemberships)
	}
	if m.histories != nil {
		edges = append(edges, user.EdgeHistories)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeOwnedProjects:
		ids := make([]ent.Value, 0, len(m.owned_projects))
		for id := range m.owned_projects {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeProjectMemberships:
		ids := make([]ent.Value, 0, len(m.project_memberships))
		for id := range m.project_memberships {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeHistories:
		ids := make([]ent.Value, 0, len(m.histories))
		for id := range m.histories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedowned_projects != nil {
		edges = append(edges, user.EdgeOwnedProjects)
	}
	if m.removedproject_memberships != nil {
		edges = append(edges, user.EdgeProjectMemberships)
	}
	if m.removedhistories != nil {
		edges = append(edges, user.EdgeHistories)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeOwnedProjects:
		ids := make([]ent.Value, 0, len(m.removedowned_projects))
		for id := range m.removedowned_projects {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeProjectMemberships:
		ids := make([]ent.Value, 0, len(m.removedproject_memberships))
		for id := range m.removedproject_memberships {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeHistories:
		ids := make([]ent.Value, 0, len(m.removedhistories))
		for id := range m.removedhistories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedowned_projects {
		edges = append(edges, user.EdgeOwnedProjects)
	}
	if m.clearedproject_memberships {
		edges = append(edges, user.EdgeProjectMemberships)
	}
	if m.clearedhistories {
		edges = append(edges, user.EdgeHistories)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeOwnedProjects:
		return m.clearedowned_projects
	case user.EdgeProjectMemberships:
		return m.clearedproject_memberships
	case user.EdgeHistories:
		return m.clearedhistories
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeOwnedProjects:
		m.ResetOwnedProjects()
		return nil
	case user.EdgeProjectMemberships:
		m.ResetProjectMemberships()
		return nil
	case user.EdgeHistories:
		m.ResetHistories()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
