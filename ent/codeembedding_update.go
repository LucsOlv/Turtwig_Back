// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/LucsOlv/Turtwing_Back/ent/codeembedding"
	"github.com/LucsOlv/Turtwing_Back/ent/predicate"
	"github.com/LucsOlv/Turtwing_Back/ent/project"
	"github.com/google/uuid"
)

// CodeEmbeddingUpdate is the builder for updating CodeEmbedding entities.
type CodeEmbeddingUpdate struct {
	config
	hooks    []Hook
	mutation *CodeEmbeddingMutation
}

// Where appends a list predicates to the CodeEmbeddingUpdate builder.
func (ceu *CodeEmbeddingUpdate) Where(ps ...predicate.CodeEmbedding) *CodeEmbeddingUpdate {
	ceu.mutation.Where(ps...)
	return ceu
}

// SetFileName sets the "file_name" field.
func (ceu *CodeEmbeddingUpdate) SetFileName(s string) *CodeEmbeddingUpdate {
	ceu.mutation.SetFileName(s)
	return ceu
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (ceu *CodeEmbeddingUpdate) SetNillableFileName(s *string) *CodeEmbeddingUpdate {
	if s != nil {
		ceu.SetFileName(*s)
	}
	return ceu
}

// SetFilePath sets the "file_path" field.
func (ceu *CodeEmbeddingUpdate) SetFilePath(s string) *CodeEmbeddingUpdate {
	ceu.mutation.SetFilePath(s)
	return ceu
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (ceu *CodeEmbeddingUpdate) SetNillableFilePath(s *string) *CodeEmbeddingUpdate {
	if s != nil {
		ceu.SetFilePath(*s)
	}
	return ceu
}

// SetEmbedding sets the "embedding" field.
func (ceu *CodeEmbeddingUpdate) SetEmbedding(f []float32) *CodeEmbeddingUpdate {
	ceu.mutation.SetEmbedding(f)
	return ceu
}

// AppendEmbedding appends f to the "embedding" field.
func (ceu *CodeEmbeddingUpdate) AppendEmbedding(f []float32) *CodeEmbeddingUpdate {
	ceu.mutation.AppendEmbedding(f)
	return ceu
}

// ClearEmbedding clears the value of the "embedding" field.
func (ceu *CodeEmbeddingUpdate) ClearEmbedding() *CodeEmbeddingUpdate {
	ceu.mutation.ClearEmbedding()
	return ceu
}

// SetProjectID sets the "project_id" field.
func (ceu *CodeEmbeddingUpdate) SetProjectID(u uuid.UUID) *CodeEmbeddingUpdate {
	ceu.mutation.SetProjectID(u)
	return ceu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (ceu *CodeEmbeddingUpdate) SetNillableProjectID(u *uuid.UUID) *CodeEmbeddingUpdate {
	if u != nil {
		ceu.SetProjectID(*u)
	}
	return ceu
}

// SetUpdatedAt sets the "updated_at" field.
func (ceu *CodeEmbeddingUpdate) SetUpdatedAt(t time.Time) *CodeEmbeddingUpdate {
	ceu.mutation.SetUpdatedAt(t)
	return ceu
}

// SetLanguage sets the "language" field.
func (ceu *CodeEmbeddingUpdate) SetLanguage(s string) *CodeEmbeddingUpdate {
	ceu.mutation.SetLanguage(s)
	return ceu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (ceu *CodeEmbeddingUpdate) SetNillableLanguage(s *string) *CodeEmbeddingUpdate {
	if s != nil {
		ceu.SetLanguage(*s)
	}
	return ceu
}

// ClearLanguage clears the value of the "language" field.
func (ceu *CodeEmbeddingUpdate) ClearLanguage() *CodeEmbeddingUpdate {
	ceu.mutation.ClearLanguage()
	return ceu
}

// SetVersion sets the "version" field.
func (ceu *CodeEmbeddingUpdate) SetVersion(s string) *CodeEmbeddingUpdate {
	ceu.mutation.SetVersion(s)
	return ceu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ceu *CodeEmbeddingUpdate) SetNillableVersion(s *string) *CodeEmbeddingUpdate {
	if s != nil {
		ceu.SetVersion(*s)
	}
	return ceu
}

// ClearVersion clears the value of the "version" field.
func (ceu *CodeEmbeddingUpdate) ClearVersion() *CodeEmbeddingUpdate {
	ceu.mutation.ClearVersion()
	return ceu
}

// SetProject sets the "project" edge to the Project entity.
func (ceu *CodeEmbeddingUpdate) SetProject(p *Project) *CodeEmbeddingUpdate {
	return ceu.SetProjectID(p.ID)
}

// Mutation returns the CodeEmbeddingMutation object of the builder.
func (ceu *CodeEmbeddingUpdate) Mutation() *CodeEmbeddingMutation {
	return ceu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (ceu *CodeEmbeddingUpdate) ClearProject() *CodeEmbeddingUpdate {
	ceu.mutation.ClearProject()
	return ceu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ceu *CodeEmbeddingUpdate) Save(ctx context.Context) (int, error) {
	ceu.defaults()
	return withHooks(ctx, ceu.sqlSave, ceu.mutation, ceu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ceu *CodeEmbeddingUpdate) SaveX(ctx context.Context) int {
	affected, err := ceu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ceu *CodeEmbeddingUpdate) Exec(ctx context.Context) error {
	_, err := ceu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceu *CodeEmbeddingUpdate) ExecX(ctx context.Context) {
	if err := ceu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ceu *CodeEmbeddingUpdate) defaults() {
	if _, ok := ceu.mutation.UpdatedAt(); !ok {
		v := codeembedding.UpdateDefaultUpdatedAt()
		ceu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ceu *CodeEmbeddingUpdate) check() error {
	if v, ok := ceu.mutation.FileName(); ok {
		if err := codeembedding.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "CodeEmbedding.file_name": %w`, err)}
		}
	}
	if v, ok := ceu.mutation.FilePath(); ok {
		if err := codeembedding.FilePathValidator(v); err != nil {
			return &ValidationError{Name: "file_path", err: fmt.Errorf(`ent: validator failed for field "CodeEmbedding.file_path": %w`, err)}
		}
	}
	if ceu.mutation.ProjectCleared() && len(ceu.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CodeEmbedding.project"`)
	}
	return nil
}

func (ceu *CodeEmbeddingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ceu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(codeembedding.Table, codeembedding.Columns, sqlgraph.NewFieldSpec(codeembedding.FieldID, field.TypeUUID))
	if ps := ceu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceu.mutation.FileName(); ok {
		_spec.SetField(codeembedding.FieldFileName, field.TypeString, value)
	}
	if value, ok := ceu.mutation.FilePath(); ok {
		_spec.SetField(codeembedding.FieldFilePath, field.TypeString, value)
	}
	if value, ok := ceu.mutation.Embedding(); ok {
		_spec.SetField(codeembedding.FieldEmbedding, field.TypeJSON, value)
	}
	if value, ok := ceu.mutation.AppendedEmbedding(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, codeembedding.FieldEmbedding, value)
		})
	}
	if ceu.mutation.EmbeddingCleared() {
		_spec.ClearField(codeembedding.FieldEmbedding, field.TypeJSON)
	}
	if value, ok := ceu.mutation.UpdatedAt(); ok {
		_spec.SetField(codeembedding.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ceu.mutation.Language(); ok {
		_spec.SetField(codeembedding.FieldLanguage, field.TypeString, value)
	}
	if ceu.mutation.LanguageCleared() {
		_spec.ClearField(codeembedding.FieldLanguage, field.TypeString)
	}
	if value, ok := ceu.mutation.Version(); ok {
		_spec.SetField(codeembedding.FieldVersion, field.TypeString, value)
	}
	if ceu.mutation.VersionCleared() {
		_spec.ClearField(codeembedding.FieldVersion, field.TypeString)
	}
	if ceu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   codeembedding.ProjectTable,
			Columns: []string{codeembedding.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   codeembedding.ProjectTable,
			Columns: []string{codeembedding.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ceu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codeembedding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ceu.mutation.done = true
	return n, nil
}

// CodeEmbeddingUpdateOne is the builder for updating a single CodeEmbedding entity.
type CodeEmbeddingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CodeEmbeddingMutation
}

// SetFileName sets the "file_name" field.
func (ceuo *CodeEmbeddingUpdateOne) SetFileName(s string) *CodeEmbeddingUpdateOne {
	ceuo.mutation.SetFileName(s)
	return ceuo
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (ceuo *CodeEmbeddingUpdateOne) SetNillableFileName(s *string) *CodeEmbeddingUpdateOne {
	if s != nil {
		ceuo.SetFileName(*s)
	}
	return ceuo
}

// SetFilePath sets the "file_path" field.
func (ceuo *CodeEmbeddingUpdateOne) SetFilePath(s string) *CodeEmbeddingUpdateOne {
	ceuo.mutation.SetFilePath(s)
	return ceuo
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (ceuo *CodeEmbeddingUpdateOne) SetNillableFilePath(s *string) *CodeEmbeddingUpdateOne {
	if s != nil {
		ceuo.SetFilePath(*s)
	}
	return ceuo
}

// SetEmbedding sets the "embedding" field.
func (ceuo *CodeEmbeddingUpdateOne) SetEmbedding(f []float32) *CodeEmbeddingUpdateOne {
	ceuo.mutation.SetEmbedding(f)
	return ceuo
}

// AppendEmbedding appends f to the "embedding" field.
func (ceuo *CodeEmbeddingUpdateOne) AppendEmbedding(f []float32) *CodeEmbeddingUpdateOne {
	ceuo.mutation.AppendEmbedding(f)
	return ceuo
}

// ClearEmbedding clears the value of the "embedding" field.
func (ceuo *CodeEmbeddingUpdateOne) ClearEmbedding() *CodeEmbeddingUpdateOne {
	ceuo.mutation.ClearEmbedding()
	return ceuo
}

// SetProjectID sets the "project_id" field.
func (ceuo *CodeEmbeddingUpdateOne) SetProjectID(u uuid.UUID) *CodeEmbeddingUpdateOne {
	ceuo.mutation.SetProjectID(u)
	return ceuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (ceuo *CodeEmbeddingUpdateOne) SetNillableProjectID(u *uuid.UUID) *CodeEmbeddingUpdateOne {
	if u != nil {
		ceuo.SetProjectID(*u)
	}
	return ceuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ceuo *CodeEmbeddingUpdateOne) SetUpdatedAt(t time.Time) *CodeEmbeddingUpdateOne {
	ceuo.mutation.SetUpdatedAt(t)
	return ceuo
}

// SetLanguage sets the "language" field.
func (ceuo *CodeEmbeddingUpdateOne) SetLanguage(s string) *CodeEmbeddingUpdateOne {
	ceuo.mutation.SetLanguage(s)
	return ceuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (ceuo *CodeEmbeddingUpdateOne) SetNillableLanguage(s *string) *CodeEmbeddingUpdateOne {
	if s != nil {
		ceuo.SetLanguage(*s)
	}
	return ceuo
}

// ClearLanguage clears the value of the "language" field.
func (ceuo *CodeEmbeddingUpdateOne) ClearLanguage() *CodeEmbeddingUpdateOne {
	ceuo.mutation.ClearLanguage()
	return ceuo
}

// SetVersion sets the "version" field.
func (ceuo *CodeEmbeddingUpdateOne) SetVersion(s string) *CodeEmbeddingUpdateOne {
	ceuo.mutation.SetVersion(s)
	return ceuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ceuo *CodeEmbeddingUpdateOne) SetNillableVersion(s *string) *CodeEmbeddingUpdateOne {
	if s != nil {
		ceuo.SetVersion(*s)
	}
	return ceuo
}

// ClearVersion clears the value of the "version" field.
func (ceuo *CodeEmbeddingUpdateOne) ClearVersion() *CodeEmbeddingUpdateOne {
	ceuo.mutation.ClearVersion()
	return ceuo
}

// SetProject sets the "project" edge to the Project entity.
func (ceuo *CodeEmbeddingUpdateOne) SetProject(p *Project) *CodeEmbeddingUpdateOne {
	return ceuo.SetProjectID(p.ID)
}

// Mutation returns the CodeEmbeddingMutation object of the builder.
func (ceuo *CodeEmbeddingUpdateOne) Mutation() *CodeEmbeddingMutation {
	return ceuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (ceuo *CodeEmbeddingUpdateOne) ClearProject() *CodeEmbeddingUpdateOne {
	ceuo.mutation.ClearProject()
	return ceuo
}

// Where appends a list predicates to the CodeEmbeddingUpdate builder.
func (ceuo *CodeEmbeddingUpdateOne) Where(ps ...predicate.CodeEmbedding) *CodeEmbeddingUpdateOne {
	ceuo.mutation.Where(ps...)
	return ceuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ceuo *CodeEmbeddingUpdateOne) Select(field string, fields ...string) *CodeEmbeddingUpdateOne {
	ceuo.fields = append([]string{field}, fields...)
	return ceuo
}

// Save executes the query and returns the updated CodeEmbedding entity.
func (ceuo *CodeEmbeddingUpdateOne) Save(ctx context.Context) (*CodeEmbedding, error) {
	ceuo.defaults()
	return withHooks(ctx, ceuo.sqlSave, ceuo.mutation, ceuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ceuo *CodeEmbeddingUpdateOne) SaveX(ctx context.Context) *CodeEmbedding {
	node, err := ceuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ceuo *CodeEmbeddingUpdateOne) Exec(ctx context.Context) error {
	_, err := ceuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceuo *CodeEmbeddingUpdateOne) ExecX(ctx context.Context) {
	if err := ceuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ceuo *CodeEmbeddingUpdateOne) defaults() {
	if _, ok := ceuo.mutation.UpdatedAt(); !ok {
		v := codeembedding.UpdateDefaultUpdatedAt()
		ceuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ceuo *CodeEmbeddingUpdateOne) check() error {
	if v, ok := ceuo.mutation.FileName(); ok {
		if err := codeembedding.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "CodeEmbedding.file_name": %w`, err)}
		}
	}
	if v, ok := ceuo.mutation.FilePath(); ok {
		if err := codeembedding.FilePathValidator(v); err != nil {
			return &ValidationError{Name: "file_path", err: fmt.Errorf(`ent: validator failed for field "CodeEmbedding.file_path": %w`, err)}
		}
	}
	if ceuo.mutation.ProjectCleared() && len(ceuo.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CodeEmbedding.project"`)
	}
	return nil
}

func (ceuo *CodeEmbeddingUpdateOne) sqlSave(ctx context.Context) (_node *CodeEmbedding, err error) {
	if err := ceuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(codeembedding.Table, codeembedding.Columns, sqlgraph.NewFieldSpec(codeembedding.FieldID, field.TypeUUID))
	id, ok := ceuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CodeEmbedding.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ceuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, codeembedding.FieldID)
		for _, f := range fields {
			if !codeembedding.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != codeembedding.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ceuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceuo.mutation.FileName(); ok {
		_spec.SetField(codeembedding.FieldFileName, field.TypeString, value)
	}
	if value, ok := ceuo.mutation.FilePath(); ok {
		_spec.SetField(codeembedding.FieldFilePath, field.TypeString, value)
	}
	if value, ok := ceuo.mutation.Embedding(); ok {
		_spec.SetField(codeembedding.FieldEmbedding, field.TypeJSON, value)
	}
	if value, ok := ceuo.mutation.AppendedEmbedding(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, codeembedding.FieldEmbedding, value)
		})
	}
	if ceuo.mutation.EmbeddingCleared() {
		_spec.ClearField(codeembedding.FieldEmbedding, field.TypeJSON)
	}
	if value, ok := ceuo.mutation.UpdatedAt(); ok {
		_spec.SetField(codeembedding.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ceuo.mutation.Language(); ok {
		_spec.SetField(codeembedding.FieldLanguage, field.TypeString, value)
	}
	if ceuo.mutation.LanguageCleared() {
		_spec.ClearField(codeembedding.FieldLanguage, field.TypeString)
	}
	if value, ok := ceuo.mutation.Version(); ok {
		_spec.SetField(codeembedding.FieldVersion, field.TypeString, value)
	}
	if ceuo.mutation.VersionCleared() {
		_spec.ClearField(codeembedding.FieldVersion, field.TypeString)
	}
	if ceuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   codeembedding.ProjectTable,
			Columns: []string{codeembedding.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   codeembedding.ProjectTable,
			Columns: []string{codeembedding.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CodeEmbedding{config: ceuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ceuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codeembedding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ceuo.mutation.done = true
	return _node, nil
}
