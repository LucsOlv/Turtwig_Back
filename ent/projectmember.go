// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/LucsOlv/Turtwing_Back/ent/project"
	"github.com/LucsOlv/Turtwing_Back/ent/projectmember"
	"github.com/LucsOlv/Turtwing_Back/ent/user"
	"github.com/google/uuid"
)

// ProjectMember is the model entity for the ProjectMember schema.
type ProjectMember struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID uuid.UUID `json:"project_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Role holds the value of the "role" field.
	Role projectmember.Role `json:"role,omitempty"`
	// Status holds the value of the "status" field.
	Status projectmember.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectMemberQuery when eager-loading is set.
	Edges        ProjectMemberEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectMemberEdges holds the relations/edges for other nodes in the graph.
type ProjectMemberEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectMemberEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectMemberEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectMember) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectmember.FieldRole, projectmember.FieldStatus:
			values[i] = new(sql.NullString)
		case projectmember.FieldCreatedAt, projectmember.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case projectmember.FieldID, projectmember.FieldProjectID, projectmember.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectMember fields.
func (pm *ProjectMember) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectmember.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pm.ID = *value
			}
		case projectmember.FieldProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				pm.ProjectID = *value
			}
		case projectmember.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				pm.UserID = *value
			}
		case projectmember.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pm.CreatedAt = value.Time
			}
		case projectmember.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pm.UpdatedAt = value.Time
			}
		case projectmember.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				pm.Role = projectmember.Role(value.String)
			}
		case projectmember.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pm.Status = projectmember.Status(value.String)
			}
		default:
			pm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectMember.
// This includes values selected through modifiers, order, etc.
func (pm *ProjectMember) Value(name string) (ent.Value, error) {
	return pm.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ProjectMember entity.
func (pm *ProjectMember) QueryProject() *ProjectQuery {
	return NewProjectMemberClient(pm.config).QueryProject(pm)
}

// QueryUser queries the "user" edge of the ProjectMember entity.
func (pm *ProjectMember) QueryUser() *UserQuery {
	return NewProjectMemberClient(pm.config).QueryUser(pm)
}

// Update returns a builder for updating this ProjectMember.
// Note that you need to call ProjectMember.Unwrap() before calling this method if this ProjectMember
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *ProjectMember) Update() *ProjectMemberUpdateOne {
	return NewProjectMemberClient(pm.config).UpdateOne(pm)
}

// Unwrap unwraps the ProjectMember entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *ProjectMember) Unwrap() *ProjectMember {
	_tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectMember is not a transactional entity")
	}
	pm.config.driver = _tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *ProjectMember) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectMember(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pm.ID))
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", pm.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pm.UserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", pm.Role))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pm.Status))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectMembers is a parsable slice of ProjectMember.
type ProjectMembers []*ProjectMember
