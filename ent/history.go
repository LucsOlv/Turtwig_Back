// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/LucsOlv/Turtwing_Back/ent/history"
	"github.com/LucsOlv/Turtwing_Back/ent/project"
	"github.com/LucsOlv/Turtwing_Back/ent/user"
	"github.com/google/uuid"
)

// History is the model entity for the History schema.
type History struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID uuid.UUID `json:"project_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// Details holds the value of the "details" field.
	Details map[string]interface{} `json:"details,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HistoryQuery when eager-loading is set.
	Edges        HistoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HistoryEdges holds the relations/edges for other nodes in the graph.
type HistoryEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// HistoryProjects holds the value of the history_projects edge.
	HistoryProjects []*HistoryProject `json:"history_projects,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HistoryEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HistoryEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// HistoryProjectsOrErr returns the HistoryProjects value or an error if the edge
// was not loaded in eager-loading.
func (e HistoryEdges) HistoryProjectsOrErr() ([]*HistoryProject, error) {
	if e.loadedTypes[2] {
		return e.HistoryProjects, nil
	}
	return nil, &NotLoadedError{edge: "history_projects"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*History) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case history.FieldDetails:
			values[i] = new([]byte)
		case history.FieldAction, history.FieldIPAddress:
			values[i] = new(sql.NullString)
		case history.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case history.FieldID, history.FieldUserID, history.FieldProjectID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the History fields.
func (h *History) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case history.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				h.ID = *value
			}
		case history.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				h.UserID = *value
			}
		case history.FieldProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				h.ProjectID = *value
			}
		case history.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				h.CreatedAt = value.Time
			}
		case history.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				h.Action = value.String
			}
		case history.FieldDetails:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &h.Details); err != nil {
					return fmt.Errorf("unmarshal field details: %w", err)
				}
			}
		case history.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				h.IPAddress = value.String
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the History.
// This includes values selected through modifiers, order, etc.
func (h *History) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the History entity.
func (h *History) QueryUser() *UserQuery {
	return NewHistoryClient(h.config).QueryUser(h)
}

// QueryProject queries the "project" edge of the History entity.
func (h *History) QueryProject() *ProjectQuery {
	return NewHistoryClient(h.config).QueryProject(h)
}

// QueryHistoryProjects queries the "history_projects" edge of the History entity.
func (h *History) QueryHistoryProjects() *HistoryProjectQuery {
	return NewHistoryClient(h.config).QueryHistoryProjects(h)
}

// Update returns a builder for updating this History.
// Note that you need to call History.Unwrap() before calling this method if this History
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *History) Update() *HistoryUpdateOne {
	return NewHistoryClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the History entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *History) Unwrap() *History {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: History is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *History) String() string {
	var builder strings.Builder
	builder.WriteString("History(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", h.UserID))
	builder.WriteString(", ")
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", h.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(h.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(h.Action)
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(fmt.Sprintf("%v", h.Details))
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(h.IPAddress)
	builder.WriteByte(')')
	return builder.String()
}

// Histories is a parsable slice of History.
type Histories []*History
