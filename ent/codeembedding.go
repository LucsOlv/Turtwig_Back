// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/LucsOlv/Turtwing_Back/ent/codeembedding"
	"github.com/LucsOlv/Turtwing_Back/ent/project"
	"github.com/google/uuid"
)

// CodeEmbedding is the model entity for the CodeEmbedding schema.
type CodeEmbedding struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// FileName holds the value of the "file_name" field.
	FileName string `json:"file_name,omitempty"`
	// FilePath holds the value of the "file_path" field.
	FilePath string `json:"file_path,omitempty"`
	// Embedding holds the value of the "embedding" field.
	Embedding []float32 `json:"embedding,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID uuid.UUID `json:"project_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CodeEmbeddingQuery when eager-loading is set.
	Edges        CodeEmbeddingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CodeEmbeddingEdges holds the relations/edges for other nodes in the graph.
type CodeEmbeddingEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CodeEmbeddingEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CodeEmbedding) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case codeembedding.FieldEmbedding:
			values[i] = new([]byte)
		case codeembedding.FieldFileName, codeembedding.FieldFilePath, codeembedding.FieldLanguage, codeembedding.FieldVersion:
			values[i] = new(sql.NullString)
		case codeembedding.FieldCreatedAt, codeembedding.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case codeembedding.FieldID, codeembedding.FieldProjectID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CodeEmbedding fields.
func (ce *CodeEmbedding) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case codeembedding.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ce.ID = *value
			}
		case codeembedding.FieldFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_name", values[i])
			} else if value.Valid {
				ce.FileName = value.String
			}
		case codeembedding.FieldFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_path", values[i])
			} else if value.Valid {
				ce.FilePath = value.String
			}
		case codeembedding.FieldEmbedding:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field embedding", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ce.Embedding); err != nil {
					return fmt.Errorf("unmarshal field embedding: %w", err)
				}
			}
		case codeembedding.FieldProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				ce.ProjectID = *value
			}
		case codeembedding.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ce.CreatedAt = value.Time
			}
		case codeembedding.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ce.UpdatedAt = value.Time
			}
		case codeembedding.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				ce.Language = value.String
			}
		case codeembedding.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ce.Version = value.String
			}
		default:
			ce.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CodeEmbedding.
// This includes values selected through modifiers, order, etc.
func (ce *CodeEmbedding) Value(name string) (ent.Value, error) {
	return ce.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the CodeEmbedding entity.
func (ce *CodeEmbedding) QueryProject() *ProjectQuery {
	return NewCodeEmbeddingClient(ce.config).QueryProject(ce)
}

// Update returns a builder for updating this CodeEmbedding.
// Note that you need to call CodeEmbedding.Unwrap() before calling this method if this CodeEmbedding
// was returned from a transaction, and the transaction was committed or rolled back.
func (ce *CodeEmbedding) Update() *CodeEmbeddingUpdateOne {
	return NewCodeEmbeddingClient(ce.config).UpdateOne(ce)
}

// Unwrap unwraps the CodeEmbedding entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ce *CodeEmbedding) Unwrap() *CodeEmbedding {
	_tx, ok := ce.config.driver.(*txDriver)
	if !ok {
		panic("ent: CodeEmbedding is not a transactional entity")
	}
	ce.config.driver = _tx.drv
	return ce
}

// String implements the fmt.Stringer.
func (ce *CodeEmbedding) String() string {
	var builder strings.Builder
	builder.WriteString("CodeEmbedding(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ce.ID))
	builder.WriteString("file_name=")
	builder.WriteString(ce.FileName)
	builder.WriteString(", ")
	builder.WriteString("file_path=")
	builder.WriteString(ce.FilePath)
	builder.WriteString(", ")
	builder.WriteString("embedding=")
	builder.WriteString(fmt.Sprintf("%v", ce.Embedding))
	builder.WriteString(", ")
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", ce.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ce.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ce.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(ce.Language)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(ce.Version)
	builder.WriteByte(')')
	return builder.String()
}

// CodeEmbeddings is a parsable slice of CodeEmbedding.
type CodeEmbeddings []*CodeEmbedding
