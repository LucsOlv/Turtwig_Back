// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/LucsOlv/Turtwing_Back/ent/codeembedding"
	"github.com/LucsOlv/Turtwing_Back/ent/history"
	"github.com/LucsOlv/Turtwing_Back/ent/historyproject"
	"github.com/LucsOlv/Turtwing_Back/ent/predicate"
	"github.com/LucsOlv/Turtwing_Back/ent/project"
	"github.com/LucsOlv/Turtwing_Back/ent/projectmember"
	"github.com/LucsOlv/Turtwing_Back/ent/user"
	"github.com/google/uuid"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProjectUpdate) SetName(s string) *ProjectUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableName(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProjectUpdate) SetDescription(s string) *ProjectUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDescription(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *ProjectUpdate) ClearDescription() *ProjectUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetGitRepositoryURL sets the "git_repository_url" field.
func (pu *ProjectUpdate) SetGitRepositoryURL(s string) *ProjectUpdate {
	pu.mutation.SetGitRepositoryURL(s)
	return pu
}

// SetNillableGitRepositoryURL sets the "git_repository_url" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableGitRepositoryURL(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetGitRepositoryURL(*s)
	}
	return pu
}

// ClearGitRepositoryURL clears the value of the "git_repository_url" field.
func (pu *ProjectUpdate) ClearGitRepositoryURL() *ProjectUpdate {
	pu.mutation.ClearGitRepositoryURL()
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProjectUpdate) SetUpdatedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetStatus sets the "status" field.
func (pu *ProjectUpdate) SetStatus(pr project.Status) *ProjectUpdate {
	pu.mutation.SetStatus(pr)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableStatus(pr *project.Status) *ProjectUpdate {
	if pr != nil {
		pu.SetStatus(*pr)
	}
	return pu
}

// SetOwnerID sets the "owner_id" field.
func (pu *ProjectUpdate) SetOwnerID(u uuid.UUID) *ProjectUpdate {
	pu.mutation.SetOwnerID(u)
	return pu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableOwnerID(u *uuid.UUID) *ProjectUpdate {
	if u != nil {
		pu.SetOwnerID(*u)
	}
	return pu
}

// SetSettings sets the "settings" field.
func (pu *ProjectUpdate) SetSettings(m map[string]interface{}) *ProjectUpdate {
	pu.mutation.SetSettings(m)
	return pu
}

// SetOwner sets the "owner" edge to the User entity.
func (pu *ProjectUpdate) SetOwner(u *User) *ProjectUpdate {
	return pu.SetOwnerID(u.ID)
}

// AddMemberIDs adds the "members" edge to the ProjectMember entity by IDs.
func (pu *ProjectUpdate) AddMemberIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddMemberIDs(ids...)
	return pu
}

// AddMembers adds the "members" edges to the ProjectMember entity.
func (pu *ProjectUpdate) AddMembers(p ...*ProjectMember) *ProjectUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddMemberIDs(ids...)
}

// AddCodeEmbeddingIDs adds the "code_embeddings" edge to the CodeEmbedding entity by IDs.
func (pu *ProjectUpdate) AddCodeEmbeddingIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddCodeEmbeddingIDs(ids...)
	return pu
}

// AddCodeEmbeddings adds the "code_embeddings" edges to the CodeEmbedding entity.
func (pu *ProjectUpdate) AddCodeEmbeddings(c ...*CodeEmbedding) *ProjectUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCodeEmbeddingIDs(ids...)
}

// AddHistoryIDs adds the "histories" edge to the History entity by IDs.
func (pu *ProjectUpdate) AddHistoryIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddHistoryIDs(ids...)
	return pu
}

// AddHistories adds the "histories" edges to the History entity.
func (pu *ProjectUpdate) AddHistories(h ...*History) *ProjectUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return pu.AddHistoryIDs(ids...)
}

// AddHistoryProjectIDs adds the "history_projects" edge to the HistoryProject entity by IDs.
func (pu *ProjectUpdate) AddHistoryProjectIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddHistoryProjectIDs(ids...)
	return pu
}

// AddHistoryProjects adds the "history_projects" edges to the HistoryProject entity.
func (pu *ProjectUpdate) AddHistoryProjects(h ...*HistoryProject) *ProjectUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return pu.AddHistoryProjectIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (pu *ProjectUpdate) ClearOwner() *ProjectUpdate {
	pu.mutation.ClearOwner()
	return pu
}

// ClearMembers clears all "members" edges to the ProjectMember entity.
func (pu *ProjectUpdate) ClearMembers() *ProjectUpdate {
	pu.mutation.ClearMembers()
	return pu
}

// RemoveMemberIDs removes the "members" edge to ProjectMember entities by IDs.
func (pu *ProjectUpdate) RemoveMemberIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveMemberIDs(ids...)
	return pu
}

// RemoveMembers removes "members" edges to ProjectMember entities.
func (pu *ProjectUpdate) RemoveMembers(p ...*ProjectMember) *ProjectUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveMemberIDs(ids...)
}

// ClearCodeEmbeddings clears all "code_embeddings" edges to the CodeEmbedding entity.
func (pu *ProjectUpdate) ClearCodeEmbeddings() *ProjectUpdate {
	pu.mutation.ClearCodeEmbeddings()
	return pu
}

// RemoveCodeEmbeddingIDs removes the "code_embeddings" edge to CodeEmbedding entities by IDs.
func (pu *ProjectUpdate) RemoveCodeEmbeddingIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveCodeEmbeddingIDs(ids...)
	return pu
}

// RemoveCodeEmbeddings removes "code_embeddings" edges to CodeEmbedding entities.
func (pu *ProjectUpdate) RemoveCodeEmbeddings(c ...*CodeEmbedding) *ProjectUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCodeEmbeddingIDs(ids...)
}

// ClearHistories clears all "histories" edges to the History entity.
func (pu *ProjectUpdate) ClearHistories() *ProjectUpdate {
	pu.mutation.ClearHistories()
	return pu
}

// RemoveHistoryIDs removes the "histories" edge to History entities by IDs.
func (pu *ProjectUpdate) RemoveHistoryIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveHistoryIDs(ids...)
	return pu
}

// RemoveHistories removes "histories" edges to History entities.
func (pu *ProjectUpdate) RemoveHistories(h ...*History) *ProjectUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return pu.RemoveHistoryIDs(ids...)
}

// ClearHistoryProjects clears all "history_projects" edges to the HistoryProject entity.
func (pu *ProjectUpdate) ClearHistoryProjects() *ProjectUpdate {
	pu.mutation.ClearHistoryProjects()
	return pu
}

// RemoveHistoryProjectIDs removes the "history_projects" edge to HistoryProject entities by IDs.
func (pu *ProjectUpdate) RemoveHistoryProjectIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveHistoryProjectIDs(ids...)
	return pu
}

// RemoveHistoryProjects removes "history_projects" edges to HistoryProject entities.
func (pu *ProjectUpdate) RemoveHistoryProjects(h ...*HistoryProject) *ProjectUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return pu.RemoveHistoryProjectIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProjectUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProjectUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Status(); ok {
		if err := project.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Project.status": %w`, err)}
		}
	}
	if pu.mutation.OwnerCleared() && len(pu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Project.owner"`)
	}
	return nil
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(project.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.GitRepositoryURL(); ok {
		_spec.SetField(project.FieldGitRepositoryURL, field.TypeString, value)
	}
	if pu.mutation.GitRepositoryURLCleared() {
		_spec.ClearField(project.FieldGitRepositoryURL, field.TypeString)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(project.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Settings(); ok {
		_spec.SetField(project.FieldSettings, field.TypeJSON, value)
	}
	if pu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.OwnerTable,
			Columns: []string{project.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.OwnerTable,
			Columns: []string{project.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: []string{project.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectmember.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMembersIDs(); len(nodes) > 0 && !pu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: []string{project.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectmember.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: []string{project.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectmember.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CodeEmbeddingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.CodeEmbeddingsTable,
			Columns: []string{project.CodeEmbeddingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codeembedding.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCodeEmbeddingsIDs(); len(nodes) > 0 && !pu.mutation.CodeEmbeddingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.CodeEmbeddingsTable,
			Columns: []string{project.CodeEmbeddingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codeembedding.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CodeEmbeddingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.CodeEmbeddingsTable,
			Columns: []string{project.CodeEmbeddingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codeembedding.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.HistoriesTable,
			Columns: []string{project.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedHistoriesIDs(); len(nodes) > 0 && !pu.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.HistoriesTable,
			Columns: []string{project.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.HistoriesTable,
			Columns: []string{project.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.HistoryProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.HistoryProjectsTable,
			Columns: []string{project.HistoryProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(historyproject.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedHistoryProjectsIDs(); len(nodes) > 0 && !pu.mutation.HistoryProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.HistoryProjectsTable,
			Columns: []string{project.HistoryProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(historyproject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.HistoryProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.HistoryProjectsTable,
			Columns: []string{project.HistoryProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(historyproject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetName sets the "name" field.
func (puo *ProjectUpdateOne) SetName(s string) *ProjectUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableName(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProjectUpdateOne) SetDescription(s string) *ProjectUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDescription(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *ProjectUpdateOne) ClearDescription() *ProjectUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetGitRepositoryURL sets the "git_repository_url" field.
func (puo *ProjectUpdateOne) SetGitRepositoryURL(s string) *ProjectUpdateOne {
	puo.mutation.SetGitRepositoryURL(s)
	return puo
}

// SetNillableGitRepositoryURL sets the "git_repository_url" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableGitRepositoryURL(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetGitRepositoryURL(*s)
	}
	return puo
}

// ClearGitRepositoryURL clears the value of the "git_repository_url" field.
func (puo *ProjectUpdateOne) ClearGitRepositoryURL() *ProjectUpdateOne {
	puo.mutation.ClearGitRepositoryURL()
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProjectUpdateOne) SetUpdatedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetStatus sets the "status" field.
func (puo *ProjectUpdateOne) SetStatus(pr project.Status) *ProjectUpdateOne {
	puo.mutation.SetStatus(pr)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableStatus(pr *project.Status) *ProjectUpdateOne {
	if pr != nil {
		puo.SetStatus(*pr)
	}
	return puo
}

// SetOwnerID sets the "owner_id" field.
func (puo *ProjectUpdateOne) SetOwnerID(u uuid.UUID) *ProjectUpdateOne {
	puo.mutation.SetOwnerID(u)
	return puo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableOwnerID(u *uuid.UUID) *ProjectUpdateOne {
	if u != nil {
		puo.SetOwnerID(*u)
	}
	return puo
}

// SetSettings sets the "settings" field.
func (puo *ProjectUpdateOne) SetSettings(m map[string]interface{}) *ProjectUpdateOne {
	puo.mutation.SetSettings(m)
	return puo
}

// SetOwner sets the "owner" edge to the User entity.
func (puo *ProjectUpdateOne) SetOwner(u *User) *ProjectUpdateOne {
	return puo.SetOwnerID(u.ID)
}

// AddMemberIDs adds the "members" edge to the ProjectMember entity by IDs.
func (puo *ProjectUpdateOne) AddMemberIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddMemberIDs(ids...)
	return puo
}

// AddMembers adds the "members" edges to the ProjectMember entity.
func (puo *ProjectUpdateOne) AddMembers(p ...*ProjectMember) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddMemberIDs(ids...)
}

// AddCodeEmbeddingIDs adds the "code_embeddings" edge to the CodeEmbedding entity by IDs.
func (puo *ProjectUpdateOne) AddCodeEmbeddingIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddCodeEmbeddingIDs(ids...)
	return puo
}

// AddCodeEmbeddings adds the "code_embeddings" edges to the CodeEmbedding entity.
func (puo *ProjectUpdateOne) AddCodeEmbeddings(c ...*CodeEmbedding) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCodeEmbeddingIDs(ids...)
}

// AddHistoryIDs adds the "histories" edge to the History entity by IDs.
func (puo *ProjectUpdateOne) AddHistoryIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddHistoryIDs(ids...)
	return puo
}

// AddHistories adds the "histories" edges to the History entity.
func (puo *ProjectUpdateOne) AddHistories(h ...*History) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return puo.AddHistoryIDs(ids...)
}

// AddHistoryProjectIDs adds the "history_projects" edge to the HistoryProject entity by IDs.
func (puo *ProjectUpdateOne) AddHistoryProjectIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddHistoryProjectIDs(ids...)
	return puo
}

// AddHistoryProjects adds the "history_projects" edges to the HistoryProject entity.
func (puo *ProjectUpdateOne) AddHistoryProjects(h ...*HistoryProject) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return puo.AddHistoryProjectIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (puo *ProjectUpdateOne) ClearOwner() *ProjectUpdateOne {
	puo.mutation.ClearOwner()
	return puo
}

// ClearMembers clears all "members" edges to the ProjectMember entity.
func (puo *ProjectUpdateOne) ClearMembers() *ProjectUpdateOne {
	puo.mutation.ClearMembers()
	return puo
}

// RemoveMemberIDs removes the "members" edge to ProjectMember entities by IDs.
func (puo *ProjectUpdateOne) RemoveMemberIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveMemberIDs(ids...)
	return puo
}

// RemoveMembers removes "members" edges to ProjectMember entities.
func (puo *ProjectUpdateOne) RemoveMembers(p ...*ProjectMember) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveMemberIDs(ids...)
}

// ClearCodeEmbeddings clears all "code_embeddings" edges to the CodeEmbedding entity.
func (puo *ProjectUpdateOne) ClearCodeEmbeddings() *ProjectUpdateOne {
	puo.mutation.ClearCodeEmbeddings()
	return puo
}

// RemoveCodeEmbeddingIDs removes the "code_embeddings" edge to CodeEmbedding entities by IDs.
func (puo *ProjectUpdateOne) RemoveCodeEmbeddingIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveCodeEmbeddingIDs(ids...)
	return puo
}

// RemoveCodeEmbeddings removes "code_embeddings" edges to CodeEmbedding entities.
func (puo *ProjectUpdateOne) RemoveCodeEmbeddings(c ...*CodeEmbedding) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCodeEmbeddingIDs(ids...)
}

// ClearHistories clears all "histories" edges to the History entity.
func (puo *ProjectUpdateOne) ClearHistories() *ProjectUpdateOne {
	puo.mutation.ClearHistories()
	return puo
}

// RemoveHistoryIDs removes the "histories" edge to History entities by IDs.
func (puo *ProjectUpdateOne) RemoveHistoryIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveHistoryIDs(ids...)
	return puo
}

// RemoveHistories removes "histories" edges to History entities.
func (puo *ProjectUpdateOne) RemoveHistories(h ...*History) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return puo.RemoveHistoryIDs(ids...)
}

// ClearHistoryProjects clears all "history_projects" edges to the HistoryProject entity.
func (puo *ProjectUpdateOne) ClearHistoryProjects() *ProjectUpdateOne {
	puo.mutation.ClearHistoryProjects()
	return puo
}

// RemoveHistoryProjectIDs removes the "history_projects" edge to HistoryProject entities by IDs.
func (puo *ProjectUpdateOne) RemoveHistoryProjectIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveHistoryProjectIDs(ids...)
	return puo
}

// RemoveHistoryProjects removes "history_projects" edges to HistoryProject entities.
func (puo *ProjectUpdateOne) RemoveHistoryProjects(h ...*HistoryProject) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return puo.RemoveHistoryProjectIDs(ids...)
}

// Where appends a list predicates to the ProjectUpdate builder.
func (puo *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProjectUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProjectUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Status(); ok {
		if err := project.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Project.status": %w`, err)}
		}
	}
	if puo.mutation.OwnerCleared() && len(puo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Project.owner"`)
	}
	return nil
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(project.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.GitRepositoryURL(); ok {
		_spec.SetField(project.FieldGitRepositoryURL, field.TypeString, value)
	}
	if puo.mutation.GitRepositoryURLCleared() {
		_spec.ClearField(project.FieldGitRepositoryURL, field.TypeString)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(project.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Settings(); ok {
		_spec.SetField(project.FieldSettings, field.TypeJSON, value)
	}
	if puo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.OwnerTable,
			Columns: []string{project.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.OwnerTable,
			Columns: []string{project.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: []string{project.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectmember.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !puo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: []string{project.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectmember.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: []string{project.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectmember.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CodeEmbeddingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.CodeEmbeddingsTable,
			Columns: []string{project.CodeEmbeddingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codeembedding.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCodeEmbeddingsIDs(); len(nodes) > 0 && !puo.mutation.CodeEmbeddingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.CodeEmbeddingsTable,
			Columns: []string{project.CodeEmbeddingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codeembedding.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CodeEmbeddingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.CodeEmbeddingsTable,
			Columns: []string{project.CodeEmbeddingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codeembedding.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.HistoriesTable,
			Columns: []string{project.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedHistoriesIDs(); len(nodes) > 0 && !puo.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.HistoriesTable,
			Columns: []string{project.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.HistoriesTable,
			Columns: []string{project.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.HistoryProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.HistoryProjectsTable,
			Columns: []string{project.HistoryProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(historyproject.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedHistoryProjectsIDs(); len(nodes) > 0 && !puo.mutation.HistoryProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.HistoryProjectsTable,
			Columns: []string{project.HistoryProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(historyproject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.HistoryProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.HistoryProjectsTable,
			Columns: []string{project.HistoryProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(historyproject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
