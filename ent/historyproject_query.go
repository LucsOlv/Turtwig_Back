// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/LucsOlv/Turtwing_Back/ent/history"
	"github.com/LucsOlv/Turtwing_Back/ent/historyproject"
	"github.com/LucsOlv/Turtwing_Back/ent/predicate"
	"github.com/LucsOlv/Turtwing_Back/ent/project"
	"github.com/google/uuid"
)

// HistoryProjectQuery is the builder for querying HistoryProject entities.
type HistoryProjectQuery struct {
	config
	ctx         *QueryContext
	order       []historyproject.OrderOption
	inters      []Interceptor
	predicates  []predicate.HistoryProject
	withProject *ProjectQuery
	withHistory *HistoryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HistoryProjectQuery builder.
func (hpq *HistoryProjectQuery) Where(ps ...predicate.HistoryProject) *HistoryProjectQuery {
	hpq.predicates = append(hpq.predicates, ps...)
	return hpq
}

// Limit the number of records to be returned by this query.
func (hpq *HistoryProjectQuery) Limit(limit int) *HistoryProjectQuery {
	hpq.ctx.Limit = &limit
	return hpq
}

// Offset to start from.
func (hpq *HistoryProjectQuery) Offset(offset int) *HistoryProjectQuery {
	hpq.ctx.Offset = &offset
	return hpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hpq *HistoryProjectQuery) Unique(unique bool) *HistoryProjectQuery {
	hpq.ctx.Unique = &unique
	return hpq
}

// Order specifies how the records should be ordered.
func (hpq *HistoryProjectQuery) Order(o ...historyproject.OrderOption) *HistoryProjectQuery {
	hpq.order = append(hpq.order, o...)
	return hpq
}

// QueryProject chains the current query on the "project" edge.
func (hpq *HistoryProjectQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: hpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(historyproject.Table, historyproject.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, historyproject.ProjectTable, historyproject.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(hpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHistory chains the current query on the "history" edge.
func (hpq *HistoryProjectQuery) QueryHistory() *HistoryQuery {
	query := (&HistoryClient{config: hpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(historyproject.Table, historyproject.FieldID, selector),
			sqlgraph.To(history.Table, history.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, historyproject.HistoryTable, historyproject.HistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(hpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HistoryProject entity from the query.
// Returns a *NotFoundError when no HistoryProject was found.
func (hpq *HistoryProjectQuery) First(ctx context.Context) (*HistoryProject, error) {
	nodes, err := hpq.Limit(1).All(setContextOp(ctx, hpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{historyproject.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hpq *HistoryProjectQuery) FirstX(ctx context.Context) *HistoryProject {
	node, err := hpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HistoryProject ID from the query.
// Returns a *NotFoundError when no HistoryProject ID was found.
func (hpq *HistoryProjectQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = hpq.Limit(1).IDs(setContextOp(ctx, hpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{historyproject.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hpq *HistoryProjectQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := hpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HistoryProject entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HistoryProject entity is found.
// Returns a *NotFoundError when no HistoryProject entities are found.
func (hpq *HistoryProjectQuery) Only(ctx context.Context) (*HistoryProject, error) {
	nodes, err := hpq.Limit(2).All(setContextOp(ctx, hpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{historyproject.Label}
	default:
		return nil, &NotSingularError{historyproject.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hpq *HistoryProjectQuery) OnlyX(ctx context.Context) *HistoryProject {
	node, err := hpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HistoryProject ID in the query.
// Returns a *NotSingularError when more than one HistoryProject ID is found.
// Returns a *NotFoundError when no entities are found.
func (hpq *HistoryProjectQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = hpq.Limit(2).IDs(setContextOp(ctx, hpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{historyproject.Label}
	default:
		err = &NotSingularError{historyproject.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hpq *HistoryProjectQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := hpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HistoryProjects.
func (hpq *HistoryProjectQuery) All(ctx context.Context) ([]*HistoryProject, error) {
	ctx = setContextOp(ctx, hpq.ctx, ent.OpQueryAll)
	if err := hpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HistoryProject, *HistoryProjectQuery]()
	return withInterceptors[[]*HistoryProject](ctx, hpq, qr, hpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hpq *HistoryProjectQuery) AllX(ctx context.Context) []*HistoryProject {
	nodes, err := hpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HistoryProject IDs.
func (hpq *HistoryProjectQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if hpq.ctx.Unique == nil && hpq.path != nil {
		hpq.Unique(true)
	}
	ctx = setContextOp(ctx, hpq.ctx, ent.OpQueryIDs)
	if err = hpq.Select(historyproject.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hpq *HistoryProjectQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := hpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hpq *HistoryProjectQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hpq.ctx, ent.OpQueryCount)
	if err := hpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hpq, querierCount[*HistoryProjectQuery](), hpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hpq *HistoryProjectQuery) CountX(ctx context.Context) int {
	count, err := hpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hpq *HistoryProjectQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hpq.ctx, ent.OpQueryExist)
	switch _, err := hpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hpq *HistoryProjectQuery) ExistX(ctx context.Context) bool {
	exist, err := hpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HistoryProjectQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hpq *HistoryProjectQuery) Clone() *HistoryProjectQuery {
	if hpq == nil {
		return nil
	}
	return &HistoryProjectQuery{
		config:      hpq.config,
		ctx:         hpq.ctx.Clone(),
		order:       append([]historyproject.OrderOption{}, hpq.order...),
		inters:      append([]Interceptor{}, hpq.inters...),
		predicates:  append([]predicate.HistoryProject{}, hpq.predicates...),
		withProject: hpq.withProject.Clone(),
		withHistory: hpq.withHistory.Clone(),
		// clone intermediate query.
		sql:  hpq.sql.Clone(),
		path: hpq.path,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (hpq *HistoryProjectQuery) WithProject(opts ...func(*ProjectQuery)) *HistoryProjectQuery {
	query := (&ProjectClient{config: hpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hpq.withProject = query
	return hpq
}

// WithHistory tells the query-builder to eager-load the nodes that are connected to
// the "history" edge. The optional arguments are used to configure the query builder of the edge.
func (hpq *HistoryProjectQuery) WithHistory(opts ...func(*HistoryQuery)) *HistoryProjectQuery {
	query := (&HistoryClient{config: hpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hpq.withHistory = query
	return hpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ProjectID uuid.UUID `json:"project_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HistoryProject.Query().
//		GroupBy(historyproject.FieldProjectID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hpq *HistoryProjectQuery) GroupBy(field string, fields ...string) *HistoryProjectGroupBy {
	hpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HistoryProjectGroupBy{build: hpq}
	grbuild.flds = &hpq.ctx.Fields
	grbuild.label = historyproject.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ProjectID uuid.UUID `json:"project_id,omitempty"`
//	}
//
//	client.HistoryProject.Query().
//		Select(historyproject.FieldProjectID).
//		Scan(ctx, &v)
func (hpq *HistoryProjectQuery) Select(fields ...string) *HistoryProjectSelect {
	hpq.ctx.Fields = append(hpq.ctx.Fields, fields...)
	sbuild := &HistoryProjectSelect{HistoryProjectQuery: hpq}
	sbuild.label = historyproject.Label
	sbuild.flds, sbuild.scan = &hpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HistoryProjectSelect configured with the given aggregations.
func (hpq *HistoryProjectQuery) Aggregate(fns ...AggregateFunc) *HistoryProjectSelect {
	return hpq.Select().Aggregate(fns...)
}

func (hpq *HistoryProjectQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hpq); err != nil {
				return err
			}
		}
	}
	for _, f := range hpq.ctx.Fields {
		if !historyproject.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hpq.path != nil {
		prev, err := hpq.path(ctx)
		if err != nil {
			return err
		}
		hpq.sql = prev
	}
	return nil
}

func (hpq *HistoryProjectQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HistoryProject, error) {
	var (
		nodes       = []*HistoryProject{}
		_spec       = hpq.querySpec()
		loadedTypes = [2]bool{
			hpq.withProject != nil,
			hpq.withHistory != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HistoryProject).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HistoryProject{config: hpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hpq.withProject; query != nil {
		if err := hpq.loadProject(ctx, query, nodes, nil,
			func(n *HistoryProject, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	if query := hpq.withHistory; query != nil {
		if err := hpq.loadHistory(ctx, query, nodes, nil,
			func(n *HistoryProject, e *History) { n.Edges.History = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hpq *HistoryProjectQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*HistoryProject, init func(*HistoryProject), assign func(*HistoryProject, *Project)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*HistoryProject)
	for i := range nodes {
		fk := nodes[i].ProjectID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hpq *HistoryProjectQuery) loadHistory(ctx context.Context, query *HistoryQuery, nodes []*HistoryProject, init func(*HistoryProject), assign func(*HistoryProject, *History)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*HistoryProject)
	for i := range nodes {
		fk := nodes[i].HistoryID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(history.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "history_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (hpq *HistoryProjectQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hpq.querySpec()
	_spec.Node.Columns = hpq.ctx.Fields
	if len(hpq.ctx.Fields) > 0 {
		_spec.Unique = hpq.ctx.Unique != nil && *hpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hpq.driver, _spec)
}

func (hpq *HistoryProjectQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(historyproject.Table, historyproject.Columns, sqlgraph.NewFieldSpec(historyproject.FieldID, field.TypeUUID))
	_spec.From = hpq.sql
	if unique := hpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hpq.path != nil {
		_spec.Unique = true
	}
	if fields := hpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, historyproject.FieldID)
		for i := range fields {
			if fields[i] != historyproject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if hpq.withProject != nil {
			_spec.Node.AddColumnOnce(historyproject.FieldProjectID)
		}
		if hpq.withHistory != nil {
			_spec.Node.AddColumnOnce(historyproject.FieldHistoryID)
		}
	}
	if ps := hpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hpq *HistoryProjectQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hpq.driver.Dialect())
	t1 := builder.Table(historyproject.Table)
	columns := hpq.ctx.Fields
	if len(columns) == 0 {
		columns = historyproject.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hpq.sql != nil {
		selector = hpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hpq.ctx.Unique != nil && *hpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range hpq.predicates {
		p(selector)
	}
	for _, p := range hpq.order {
		p(selector)
	}
	if offset := hpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HistoryProjectGroupBy is the group-by builder for HistoryProject entities.
type HistoryProjectGroupBy struct {
	selector
	build *HistoryProjectQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hpgb *HistoryProjectGroupBy) Aggregate(fns ...AggregateFunc) *HistoryProjectGroupBy {
	hpgb.fns = append(hpgb.fns, fns...)
	return hpgb
}

// Scan applies the selector query and scans the result into the given value.
func (hpgb *HistoryProjectGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hpgb.build.ctx, ent.OpQueryGroupBy)
	if err := hpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HistoryProjectQuery, *HistoryProjectGroupBy](ctx, hpgb.build, hpgb, hpgb.build.inters, v)
}

func (hpgb *HistoryProjectGroupBy) sqlScan(ctx context.Context, root *HistoryProjectQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hpgb.fns))
	for _, fn := range hpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hpgb.flds)+len(hpgb.fns))
		for _, f := range *hpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HistoryProjectSelect is the builder for selecting fields of HistoryProject entities.
type HistoryProjectSelect struct {
	*HistoryProjectQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hps *HistoryProjectSelect) Aggregate(fns ...AggregateFunc) *HistoryProjectSelect {
	hps.fns = append(hps.fns, fns...)
	return hps
}

// Scan applies the selector query and scans the result into the given value.
func (hps *HistoryProjectSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hps.ctx, ent.OpQuerySelect)
	if err := hps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HistoryProjectQuery, *HistoryProjectSelect](ctx, hps.HistoryProjectQuery, hps, hps.inters, v)
}

func (hps *HistoryProjectSelect) sqlScan(ctx context.Context, root *HistoryProjectQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hps.fns))
	for _, fn := range hps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
