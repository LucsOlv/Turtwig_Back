// Code generated by ent, DO NOT EDIT.

package historyproject

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/LucsOlv/Turtwing_Back/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldLTE(FieldID, id))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldEQ(FieldProjectID, v))
}

// HistoryID applies equality check predicate on the "history_id" field. It's identical to HistoryIDEQ.
func HistoryID(v uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldEQ(FieldHistoryID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldEQ(FieldCreatedAt, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldNotIn(FieldProjectID, vs...))
}

// HistoryIDEQ applies the EQ predicate on the "history_id" field.
func HistoryIDEQ(v uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldEQ(FieldHistoryID, v))
}

// HistoryIDNEQ applies the NEQ predicate on the "history_id" field.
func HistoryIDNEQ(v uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldNEQ(FieldHistoryID, v))
}

// HistoryIDIn applies the In predicate on the "history_id" field.
func HistoryIDIn(vs ...uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldIn(FieldHistoryID, vs...))
}

// HistoryIDNotIn applies the NotIn predicate on the "history_id" field.
func HistoryIDNotIn(vs ...uuid.UUID) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldNotIn(FieldHistoryID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldLTE(FieldCreatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.HistoryProject {
	return predicate.HistoryProject(sql.FieldNotIn(FieldStatus, vs...))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.HistoryProject {
	return predicate.HistoryProject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.HistoryProject {
	return predicate.HistoryProject(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHistory applies the HasEdge predicate on the "history" edge.
func HasHistory() predicate.HistoryProject {
	return predicate.HistoryProject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HistoryTable, HistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHistoryWith applies the HasEdge predicate on the "history" edge with a given conditions (other predicates).
func HasHistoryWith(preds ...predicate.History) predicate.HistoryProject {
	return predicate.HistoryProject(func(s *sql.Selector) {
		step := newHistoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HistoryProject) predicate.HistoryProject {
	return predicate.HistoryProject(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HistoryProject) predicate.HistoryProject {
	return predicate.HistoryProject(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HistoryProject) predicate.HistoryProject {
	return predicate.HistoryProject(sql.NotPredicates(p))
}
