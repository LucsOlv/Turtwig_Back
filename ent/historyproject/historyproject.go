// Code generated by ent, DO NOT EDIT.

package historyproject

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the historyproject type in the database.
	Label = "history_project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldHistoryID holds the string denoting the history_id field in the database.
	FieldHistoryID = "history_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldChanges holds the string denoting the changes field in the database.
	FieldChanges = "changes"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeHistory holds the string denoting the history edge name in mutations.
	EdgeHistory = "history"
	// Table holds the table name of the historyproject in the database.
	Table = "history_projects"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "history_projects"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_id"
	// HistoryTable is the table that holds the history relation/edge.
	HistoryTable = "history_projects"
	// HistoryInverseTable is the table name for the History entity.
	// It exists in this package in order to avoid circular dependency with the "history" package.
	HistoryInverseTable = "histories"
	// HistoryColumn is the table column denoting the history relation/edge.
	HistoryColumn = "history_id"
)

// Columns holds all SQL columns for historyproject fields.
var Columns = []string{
	FieldID,
	FieldProjectID,
	FieldHistoryID,
	FieldCreatedAt,
	FieldChanges,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultChanges holds the default value on creation for the "changes" field.
	DefaultChanges map[string]interface{}
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusActive is the default value of the Status enum.
const DefaultStatus = StatusActive

// Status values.
const (
	StatusActive   Status = "active"
	StatusReverted Status = "reverted"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusReverted:
		return nil
	default:
		return fmt.Errorf("historyproject: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the HistoryProject queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}

// ByHistoryID orders the results by the history_id field.
func ByHistoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHistoryID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByHistoryField orders the results by history field.
func ByHistoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHistoryStep(), sql.OrderByField(field, opts...))
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
	)
}
func newHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HistoryTable, HistoryColumn),
	)
}
