// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/LucsOlv/Turtwing_Back/ent/codeembedding"
	"github.com/LucsOlv/Turtwing_Back/ent/project"
	"github.com/google/uuid"
)

// CodeEmbeddingCreate is the builder for creating a CodeEmbedding entity.
type CodeEmbeddingCreate struct {
	config
	mutation *CodeEmbeddingMutation
	hooks    []Hook
}

// SetFileName sets the "file_name" field.
func (cec *CodeEmbeddingCreate) SetFileName(s string) *CodeEmbeddingCreate {
	cec.mutation.SetFileName(s)
	return cec
}

// SetFilePath sets the "file_path" field.
func (cec *CodeEmbeddingCreate) SetFilePath(s string) *CodeEmbeddingCreate {
	cec.mutation.SetFilePath(s)
	return cec
}

// SetEmbedding sets the "embedding" field.
func (cec *CodeEmbeddingCreate) SetEmbedding(f []float32) *CodeEmbeddingCreate {
	cec.mutation.SetEmbedding(f)
	return cec
}

// SetProjectID sets the "project_id" field.
func (cec *CodeEmbeddingCreate) SetProjectID(u uuid.UUID) *CodeEmbeddingCreate {
	cec.mutation.SetProjectID(u)
	return cec
}

// SetCreatedAt sets the "created_at" field.
func (cec *CodeEmbeddingCreate) SetCreatedAt(t time.Time) *CodeEmbeddingCreate {
	cec.mutation.SetCreatedAt(t)
	return cec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cec *CodeEmbeddingCreate) SetNillableCreatedAt(t *time.Time) *CodeEmbeddingCreate {
	if t != nil {
		cec.SetCreatedAt(*t)
	}
	return cec
}

// SetUpdatedAt sets the "updated_at" field.
func (cec *CodeEmbeddingCreate) SetUpdatedAt(t time.Time) *CodeEmbeddingCreate {
	cec.mutation.SetUpdatedAt(t)
	return cec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cec *CodeEmbeddingCreate) SetNillableUpdatedAt(t *time.Time) *CodeEmbeddingCreate {
	if t != nil {
		cec.SetUpdatedAt(*t)
	}
	return cec
}

// SetLanguage sets the "language" field.
func (cec *CodeEmbeddingCreate) SetLanguage(s string) *CodeEmbeddingCreate {
	cec.mutation.SetLanguage(s)
	return cec
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (cec *CodeEmbeddingCreate) SetNillableLanguage(s *string) *CodeEmbeddingCreate {
	if s != nil {
		cec.SetLanguage(*s)
	}
	return cec
}

// SetVersion sets the "version" field.
func (cec *CodeEmbeddingCreate) SetVersion(s string) *CodeEmbeddingCreate {
	cec.mutation.SetVersion(s)
	return cec
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cec *CodeEmbeddingCreate) SetNillableVersion(s *string) *CodeEmbeddingCreate {
	if s != nil {
		cec.SetVersion(*s)
	}
	return cec
}

// SetID sets the "id" field.
func (cec *CodeEmbeddingCreate) SetID(u uuid.UUID) *CodeEmbeddingCreate {
	cec.mutation.SetID(u)
	return cec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cec *CodeEmbeddingCreate) SetNillableID(u *uuid.UUID) *CodeEmbeddingCreate {
	if u != nil {
		cec.SetID(*u)
	}
	return cec
}

// SetProject sets the "project" edge to the Project entity.
func (cec *CodeEmbeddingCreate) SetProject(p *Project) *CodeEmbeddingCreate {
	return cec.SetProjectID(p.ID)
}

// Mutation returns the CodeEmbeddingMutation object of the builder.
func (cec *CodeEmbeddingCreate) Mutation() *CodeEmbeddingMutation {
	return cec.mutation
}

// Save creates the CodeEmbedding in the database.
func (cec *CodeEmbeddingCreate) Save(ctx context.Context) (*CodeEmbedding, error) {
	cec.defaults()
	return withHooks(ctx, cec.sqlSave, cec.mutation, cec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cec *CodeEmbeddingCreate) SaveX(ctx context.Context) *CodeEmbedding {
	v, err := cec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cec *CodeEmbeddingCreate) Exec(ctx context.Context) error {
	_, err := cec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cec *CodeEmbeddingCreate) ExecX(ctx context.Context) {
	if err := cec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cec *CodeEmbeddingCreate) defaults() {
	if _, ok := cec.mutation.CreatedAt(); !ok {
		v := codeembedding.DefaultCreatedAt()
		cec.mutation.SetCreatedAt(v)
	}
	if _, ok := cec.mutation.UpdatedAt(); !ok {
		v := codeembedding.DefaultUpdatedAt()
		cec.mutation.SetUpdatedAt(v)
	}
	if _, ok := cec.mutation.ID(); !ok {
		v := codeembedding.DefaultID()
		cec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cec *CodeEmbeddingCreate) check() error {
	if _, ok := cec.mutation.FileName(); !ok {
		return &ValidationError{Name: "file_name", err: errors.New(`ent: missing required field "CodeEmbedding.file_name"`)}
	}
	if v, ok := cec.mutation.FileName(); ok {
		if err := codeembedding.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "CodeEmbedding.file_name": %w`, err)}
		}
	}
	if _, ok := cec.mutation.FilePath(); !ok {
		return &ValidationError{Name: "file_path", err: errors.New(`ent: missing required field "CodeEmbedding.file_path"`)}
	}
	if v, ok := cec.mutation.FilePath(); ok {
		if err := codeembedding.FilePathValidator(v); err != nil {
			return &ValidationError{Name: "file_path", err: fmt.Errorf(`ent: validator failed for field "CodeEmbedding.file_path": %w`, err)}
		}
	}
	if _, ok := cec.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "CodeEmbedding.project_id"`)}
	}
	if _, ok := cec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CodeEmbedding.created_at"`)}
	}
	if _, ok := cec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CodeEmbedding.updated_at"`)}
	}
	if len(cec.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "CodeEmbedding.project"`)}
	}
	return nil
}

func (cec *CodeEmbeddingCreate) sqlSave(ctx context.Context) (*CodeEmbedding, error) {
	if err := cec.check(); err != nil {
		return nil, err
	}
	_node, _spec := cec.createSpec()
	if err := sqlgraph.CreateNode(ctx, cec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cec.mutation.id = &_node.ID
	cec.mutation.done = true
	return _node, nil
}

func (cec *CodeEmbeddingCreate) createSpec() (*CodeEmbedding, *sqlgraph.CreateSpec) {
	var (
		_node = &CodeEmbedding{config: cec.config}
		_spec = sqlgraph.NewCreateSpec(codeembedding.Table, sqlgraph.NewFieldSpec(codeembedding.FieldID, field.TypeUUID))
	)
	if id, ok := cec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cec.mutation.FileName(); ok {
		_spec.SetField(codeembedding.FieldFileName, field.TypeString, value)
		_node.FileName = value
	}
	if value, ok := cec.mutation.FilePath(); ok {
		_spec.SetField(codeembedding.FieldFilePath, field.TypeString, value)
		_node.FilePath = value
	}
	if value, ok := cec.mutation.Embedding(); ok {
		_spec.SetField(codeembedding.FieldEmbedding, field.TypeJSON, value)
		_node.Embedding = value
	}
	if value, ok := cec.mutation.CreatedAt(); ok {
		_spec.SetField(codeembedding.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cec.mutation.UpdatedAt(); ok {
		_spec.SetField(codeembedding.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cec.mutation.Language(); ok {
		_spec.SetField(codeembedding.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := cec.mutation.Version(); ok {
		_spec.SetField(codeembedding.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if nodes := cec.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   codeembedding.ProjectTable,
			Columns: []string{codeembedding.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CodeEmbeddingCreateBulk is the builder for creating many CodeEmbedding entities in bulk.
type CodeEmbeddingCreateBulk struct {
	config
	err      error
	builders []*CodeEmbeddingCreate
}

// Save creates the CodeEmbedding entities in the database.
func (cecb *CodeEmbeddingCreateBulk) Save(ctx context.Context) ([]*CodeEmbedding, error) {
	if cecb.err != nil {
		return nil, cecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cecb.builders))
	nodes := make([]*CodeEmbedding, len(cecb.builders))
	mutators := make([]Mutator, len(cecb.builders))
	for i := range cecb.builders {
		func(i int, root context.Context) {
			builder := cecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CodeEmbeddingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cecb *CodeEmbeddingCreateBulk) SaveX(ctx context.Context) []*CodeEmbedding {
	v, err := cecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cecb *CodeEmbeddingCreateBulk) Exec(ctx context.Context) error {
	_, err := cecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cecb *CodeEmbeddingCreateBulk) ExecX(ctx context.Context) {
	if err := cecb.Exec(ctx); err != nil {
		panic(err)
	}
}
