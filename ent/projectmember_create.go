// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/LucsOlv/Turtwing_Back/ent/project"
	"github.com/LucsOlv/Turtwing_Back/ent/projectmember"
	"github.com/LucsOlv/Turtwing_Back/ent/user"
	"github.com/google/uuid"
)

// ProjectMemberCreate is the builder for creating a ProjectMember entity.
type ProjectMemberCreate struct {
	config
	mutation *ProjectMemberMutation
	hooks    []Hook
}

// SetProjectID sets the "project_id" field.
func (pmc *ProjectMemberCreate) SetProjectID(u uuid.UUID) *ProjectMemberCreate {
	pmc.mutation.SetProjectID(u)
	return pmc
}

// SetUserID sets the "user_id" field.
func (pmc *ProjectMemberCreate) SetUserID(u uuid.UUID) *ProjectMemberCreate {
	pmc.mutation.SetUserID(u)
	return pmc
}

// SetCreatedAt sets the "created_at" field.
func (pmc *ProjectMemberCreate) SetCreatedAt(t time.Time) *ProjectMemberCreate {
	pmc.mutation.SetCreatedAt(t)
	return pmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmc *ProjectMemberCreate) SetNillableCreatedAt(t *time.Time) *ProjectMemberCreate {
	if t != nil {
		pmc.SetCreatedAt(*t)
	}
	return pmc
}

// SetUpdatedAt sets the "updated_at" field.
func (pmc *ProjectMemberCreate) SetUpdatedAt(t time.Time) *ProjectMemberCreate {
	pmc.mutation.SetUpdatedAt(t)
	return pmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pmc *ProjectMemberCreate) SetNillableUpdatedAt(t *time.Time) *ProjectMemberCreate {
	if t != nil {
		pmc.SetUpdatedAt(*t)
	}
	return pmc
}

// SetRole sets the "role" field.
func (pmc *ProjectMemberCreate) SetRole(pr projectmember.Role) *ProjectMemberCreate {
	pmc.mutation.SetRole(pr)
	return pmc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (pmc *ProjectMemberCreate) SetNillableRole(pr *projectmember.Role) *ProjectMemberCreate {
	if pr != nil {
		pmc.SetRole(*pr)
	}
	return pmc
}

// SetStatus sets the "status" field.
func (pmc *ProjectMemberCreate) SetStatus(pr projectmember.Status) *ProjectMemberCreate {
	pmc.mutation.SetStatus(pr)
	return pmc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pmc *ProjectMemberCreate) SetNillableStatus(pr *projectmember.Status) *ProjectMemberCreate {
	if pr != nil {
		pmc.SetStatus(*pr)
	}
	return pmc
}

// SetID sets the "id" field.
func (pmc *ProjectMemberCreate) SetID(u uuid.UUID) *ProjectMemberCreate {
	pmc.mutation.SetID(u)
	return pmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pmc *ProjectMemberCreate) SetNillableID(u *uuid.UUID) *ProjectMemberCreate {
	if u != nil {
		pmc.SetID(*u)
	}
	return pmc
}

// SetProject sets the "project" edge to the Project entity.
func (pmc *ProjectMemberCreate) SetProject(p *Project) *ProjectMemberCreate {
	return pmc.SetProjectID(p.ID)
}

// SetUser sets the "user" edge to the User entity.
func (pmc *ProjectMemberCreate) SetUser(u *User) *ProjectMemberCreate {
	return pmc.SetUserID(u.ID)
}

// Mutation returns the ProjectMemberMutation object of the builder.
func (pmc *ProjectMemberCreate) Mutation() *ProjectMemberMutation {
	return pmc.mutation
}

// Save creates the ProjectMember in the database.
func (pmc *ProjectMemberCreate) Save(ctx context.Context) (*ProjectMember, error) {
	pmc.defaults()
	return withHooks(ctx, pmc.sqlSave, pmc.mutation, pmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *ProjectMemberCreate) SaveX(ctx context.Context) *ProjectMember {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *ProjectMemberCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *ProjectMemberCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmc *ProjectMemberCreate) defaults() {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		v := projectmember.DefaultCreatedAt()
		pmc.mutation.SetCreatedAt(v)
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		v := projectmember.DefaultUpdatedAt()
		pmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pmc.mutation.Role(); !ok {
		v := projectmember.DefaultRole
		pmc.mutation.SetRole(v)
	}
	if _, ok := pmc.mutation.Status(); !ok {
		v := projectmember.DefaultStatus
		pmc.mutation.SetStatus(v)
	}
	if _, ok := pmc.mutation.ID(); !ok {
		v := projectmember.DefaultID()
		pmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *ProjectMemberCreate) check() error {
	if _, ok := pmc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "ProjectMember.project_id"`)}
	}
	if _, ok := pmc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ProjectMember.user_id"`)}
	}
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProjectMember.created_at"`)}
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProjectMember.updated_at"`)}
	}
	if _, ok := pmc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "ProjectMember.role"`)}
	}
	if v, ok := pmc.mutation.Role(); ok {
		if err := projectmember.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "ProjectMember.role": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ProjectMember.status"`)}
	}
	if v, ok := pmc.mutation.Status(); ok {
		if err := projectmember.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ProjectMember.status": %w`, err)}
		}
	}
	if len(pmc.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "ProjectMember.project"`)}
	}
	if len(pmc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ProjectMember.user"`)}
	}
	return nil
}

func (pmc *ProjectMemberCreate) sqlSave(ctx context.Context) (*ProjectMember, error) {
	if err := pmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pmc.mutation.id = &_node.ID
	pmc.mutation.done = true
	return _node, nil
}

func (pmc *ProjectMemberCreate) createSpec() (*ProjectMember, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectMember{config: pmc.config}
		_spec = sqlgraph.NewCreateSpec(projectmember.Table, sqlgraph.NewFieldSpec(projectmember.FieldID, field.TypeUUID))
	)
	if id, ok := pmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pmc.mutation.CreatedAt(); ok {
		_spec.SetField(projectmember.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pmc.mutation.UpdatedAt(); ok {
		_spec.SetField(projectmember.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pmc.mutation.Role(); ok {
		_spec.SetField(projectmember.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if value, ok := pmc.mutation.Status(); ok {
		_spec.SetField(projectmember.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := pmc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectmember.ProjectTable,
			Columns: []string{projectmember.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pmc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectmember.UserTable,
			Columns: []string{projectmember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectMemberCreateBulk is the builder for creating many ProjectMember entities in bulk.
type ProjectMemberCreateBulk struct {
	config
	err      error
	builders []*ProjectMemberCreate
}

// Save creates the ProjectMember entities in the database.
func (pmcb *ProjectMemberCreateBulk) Save(ctx context.Context) ([]*ProjectMember, error) {
	if pmcb.err != nil {
		return nil, pmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*ProjectMember, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectMemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *ProjectMemberCreateBulk) SaveX(ctx context.Context) []*ProjectMember {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *ProjectMemberCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *ProjectMemberCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
