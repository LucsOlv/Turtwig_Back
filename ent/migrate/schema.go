// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CodeEmbeddingsColumns holds the columns for the "code_embeddings" table.
	CodeEmbeddingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "file_name", Type: field.TypeString},
		{Name: "file_path", Type: field.TypeString, Size: 2147483647},
		{Name: "embedding", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "language", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeString, Nullable: true},
		{Name: "project_id", Type: field.TypeUUID},
	}
	// CodeEmbeddingsTable holds the schema information for the "code_embeddings" table.
	CodeEmbeddingsTable = &schema.Table{
		Name:       "code_embeddings",
		Columns:    CodeEmbeddingsColumns,
		PrimaryKey: []*schema.Column{CodeEmbeddingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "code_embeddings_projects_code_embeddings",
				Columns:    []*schema.Column{CodeEmbeddingsColumns[8]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// HistoriesColumns holds the columns for the "histories" table.
	HistoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "action", Type: field.TypeString},
		{Name: "details", Type: field.TypeJSON},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "project_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// HistoriesTable holds the schema information for the "histories" table.
	HistoriesTable = &schema.Table{
		Name:       "histories",
		Columns:    HistoriesColumns,
		PrimaryKey: []*schema.Column{HistoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "histories_projects_histories",
				Columns:    []*schema.Column{HistoriesColumns[5]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "histories_users_histories",
				Columns:    []*schema.Column{HistoriesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// HistoryProjectsColumns holds the columns for the "history_projects" table.
	HistoryProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "changes", Type: field.TypeJSON},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"active", "reverted"}, Default: "active"},
		{Name: "history_id", Type: field.TypeUUID},
		{Name: "project_id", Type: field.TypeUUID},
	}
	// HistoryProjectsTable holds the schema information for the "history_projects" table.
	HistoryProjectsTable = &schema.Table{
		Name:       "history_projects",
		Columns:    HistoryProjectsColumns,
		PrimaryKey: []*schema.Column{HistoryProjectsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "history_projects_histories_history_projects",
				Columns:    []*schema.Column{HistoryProjectsColumns[4]},
				RefColumns: []*schema.Column{HistoriesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "history_projects_projects_history_projects",
				Columns:    []*schema.Column{HistoryProjectsColumns[5]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "historyproject_project_id_history_id",
				Unique:  true,
				Columns: []*schema.Column{HistoryProjectsColumns[5], HistoryProjectsColumns[4]},
			},
		},
	}
	// ProjectsColumns holds the columns for the "projects" table.
	ProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "git_repository_url", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"active", "archived", "deleted"}, Default: "active"},
		{Name: "settings", Type: field.TypeJSON},
		{Name: "owner_id", Type: field.TypeUUID},
	}
	// ProjectsTable holds the schema information for the "projects" table.
	ProjectsTable = &schema.Table{
		Name:       "projects",
		Columns:    ProjectsColumns,
		PrimaryKey: []*schema.Column{ProjectsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "projects_users_owned_projects",
				Columns:    []*schema.Column{ProjectsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ProjectMembersColumns holds the columns for the "project_members" table.
	ProjectMembersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"owner", "admin", "member", "viewer"}, Default: "member"},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"active", "inactive"}, Default: "active"},
		{Name: "project_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// ProjectMembersTable holds the schema information for the "project_members" table.
	ProjectMembersTable = &schema.Table{
		Name:       "project_members",
		Columns:    ProjectMembersColumns,
		PrimaryKey: []*schema.Column{ProjectMembersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "project_members_projects_members",
				Columns:    []*schema.Column{ProjectMembersColumns[5]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "project_members_users_project_memberships",
				Columns:    []*schema.Column{ProjectMembersColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "projectmember_project_id_user_id",
				Unique:  true,
				Columns: []*schema.Column{ProjectMembersColumns[5], ProjectMembersColumns[6]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "last_login", Type: field.TypeTime, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"active", "inactive", "suspended"}, Default: "active"},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"user", "admin", "manager"}, Default: "user"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CodeEmbeddingsTable,
		HistoriesTable,
		HistoryProjectsTable,
		ProjectsTable,
		ProjectMembersTable,
		UsersTable,
	}
)

func init() {
	CodeEmbeddingsTable.ForeignKeys[0].RefTable = ProjectsTable
	HistoriesTable.ForeignKeys[0].RefTable = ProjectsTable
	HistoriesTable.ForeignKeys[1].RefTable = UsersTable
	HistoryProjectsTable.ForeignKeys[0].RefTable = HistoriesTable
	HistoryProjectsTable.ForeignKeys[1].RefTable = ProjectsTable
	ProjectsTable.ForeignKeys[0].RefTable = UsersTable
	ProjectMembersTable.ForeignKeys[0].RefTable = ProjectsTable
	ProjectMembersTable.ForeignKeys[1].RefTable = UsersTable
}
