// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/LucsOlv/Turtwing_Back/ent/history"
	"github.com/LucsOlv/Turtwing_Back/ent/historyproject"
	"github.com/LucsOlv/Turtwing_Back/ent/project"
	"github.com/google/uuid"
)

// HistoryProject is the model entity for the HistoryProject schema.
type HistoryProject struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID uuid.UUID `json:"project_id,omitempty"`
	// HistoryID holds the value of the "history_id" field.
	HistoryID uuid.UUID `json:"history_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Changes holds the value of the "changes" field.
	Changes map[string]interface{} `json:"changes,omitempty"`
	// Status holds the value of the "status" field.
	Status historyproject.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HistoryProjectQuery when eager-loading is set.
	Edges        HistoryProjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HistoryProjectEdges holds the relations/edges for other nodes in the graph.
type HistoryProjectEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// History holds the value of the history edge.
	History *History `json:"history,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HistoryProjectEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// HistoryOrErr returns the History value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HistoryProjectEdges) HistoryOrErr() (*History, error) {
	if e.History != nil {
		return e.History, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: history.Label}
	}
	return nil, &NotLoadedError{edge: "history"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HistoryProject) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case historyproject.FieldChanges:
			values[i] = new([]byte)
		case historyproject.FieldStatus:
			values[i] = new(sql.NullString)
		case historyproject.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case historyproject.FieldID, historyproject.FieldProjectID, historyproject.FieldHistoryID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HistoryProject fields.
func (hp *HistoryProject) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case historyproject.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				hp.ID = *value
			}
		case historyproject.FieldProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				hp.ProjectID = *value
			}
		case historyproject.FieldHistoryID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field history_id", values[i])
			} else if value != nil {
				hp.HistoryID = *value
			}
		case historyproject.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hp.CreatedAt = value.Time
			}
		case historyproject.FieldChanges:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field changes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hp.Changes); err != nil {
					return fmt.Errorf("unmarshal field changes: %w", err)
				}
			}
		case historyproject.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				hp.Status = historyproject.Status(value.String)
			}
		default:
			hp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HistoryProject.
// This includes values selected through modifiers, order, etc.
func (hp *HistoryProject) Value(name string) (ent.Value, error) {
	return hp.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the HistoryProject entity.
func (hp *HistoryProject) QueryProject() *ProjectQuery {
	return NewHistoryProjectClient(hp.config).QueryProject(hp)
}

// QueryHistory queries the "history" edge of the HistoryProject entity.
func (hp *HistoryProject) QueryHistory() *HistoryQuery {
	return NewHistoryProjectClient(hp.config).QueryHistory(hp)
}

// Update returns a builder for updating this HistoryProject.
// Note that you need to call HistoryProject.Unwrap() before calling this method if this HistoryProject
// was returned from a transaction, and the transaction was committed or rolled back.
func (hp *HistoryProject) Update() *HistoryProjectUpdateOne {
	return NewHistoryProjectClient(hp.config).UpdateOne(hp)
}

// Unwrap unwraps the HistoryProject entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hp *HistoryProject) Unwrap() *HistoryProject {
	_tx, ok := hp.config.driver.(*txDriver)
	if !ok {
		panic("ent: HistoryProject is not a transactional entity")
	}
	hp.config.driver = _tx.drv
	return hp
}

// String implements the fmt.Stringer.
func (hp *HistoryProject) String() string {
	var builder strings.Builder
	builder.WriteString("HistoryProject(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hp.ID))
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", hp.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("history_id=")
	builder.WriteString(fmt.Sprintf("%v", hp.HistoryID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(hp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("changes=")
	builder.WriteString(fmt.Sprintf("%v", hp.Changes))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", hp.Status))
	builder.WriteByte(')')
	return builder.String()
}

// HistoryProjects is a parsable slice of HistoryProject.
type HistoryProjects []*HistoryProject
